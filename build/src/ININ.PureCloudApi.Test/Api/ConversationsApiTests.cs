using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using NUnit.Framework;

using ININ.PureCloudApi.Client;
using ININ.PureCloudApi.Api;
using ININ.PureCloudApi.Model;

namespace ININ.PureCloudApi.Test
{
    /// <summary>
    ///  Class for testing ConversationsApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by Swagger Codegen.
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    [TestFixture]
    public class ConversationsApiTests
    {
        private ConversationsApi instance;

        /// <summary>
        /// Setup before each unit test
        /// </summary>
        [SetUp]
        public void Init()
        {
            instance = new ConversationsApi();
        }

        /// <summary>
        /// Clean up after each unit test
        /// </summary>
        [TearDown]
        public void Cleanup()
        {

        }

        /// <summary>
        /// Test an instance of ConversationsApi
        /// </summary>
        [Test]
        public void InstanceTest()
        {
            Assert.IsInstanceOf<ConversationsApi> (instance, "instance is a ConversationsApi");
        }

        
        /// <summary>
        /// Test DeleteCallsCallIdParticipantsParticipantIdConsult
        /// </summary>
        [Test]
        public void DeleteCallsCallIdParticipantsParticipantIdConsultTest()
        {
            // TODO: add unit test for the method 'DeleteCallsCallIdParticipantsParticipantIdConsult'
            string callId = null; // TODO: replace null with proper value
            string participantId = null; // TODO: replace null with proper value
            var response = instance.DeleteCallsCallIdParticipantsParticipantIdConsult(callId, participantId);
            Assert.IsInstanceOf<string> (response, "response is string");
        }
        
        /// <summary>
        /// Test DeleteConversationIdParticipantsParticipantIdCodesAddcommunicationcode
        /// </summary>
        [Test]
        public void DeleteConversationIdParticipantsParticipantIdCodesAddcommunicationcodeTest()
        {
            // TODO: add unit test for the method 'DeleteConversationIdParticipantsParticipantIdCodesAddcommunicationcode'
            string conversationId = null; // TODO: replace null with proper value
            string participantId = null; // TODO: replace null with proper value
            string addCommunicationCode = null; // TODO: replace null with proper value
            instance.DeleteConversationIdParticipantsParticipantIdCodesAddcommunicationcode(conversationId, participantId, addCommunicationCode);
            
        }
        
        /// <summary>
        /// Test DeleteEmailsEmailIdMessagesDraftAttachmentsAttachmentId
        /// </summary>
        [Test]
        public void DeleteEmailsEmailIdMessagesDraftAttachmentsAttachmentIdTest()
        {
            // TODO: add unit test for the method 'DeleteEmailsEmailIdMessagesDraftAttachmentsAttachmentId'
            string emailId = null; // TODO: replace null with proper value
            string attachmentId = null; // TODO: replace null with proper value
            var response = instance.DeleteEmailsEmailIdMessagesDraftAttachmentsAttachmentId(emailId, attachmentId);
            Assert.IsInstanceOf<string> (response, "response is string");
        }
        
        /// <summary>
        /// Test GetCallbacks
        /// </summary>
        [Test]
        public void GetCallbacksTest()
        {
            // TODO: add unit test for the method 'GetCallbacks'
            var response = instance.GetCallbacks();
            Assert.IsInstanceOf<CallbackConversationEntityListing> (response, "response is CallbackConversationEntityListing");
        }
        
        /// <summary>
        /// Test GetCallbacksCallbackId
        /// </summary>
        [Test]
        public void GetCallbacksCallbackIdTest()
        {
            // TODO: add unit test for the method 'GetCallbacksCallbackId'
            string callbackId = null; // TODO: replace null with proper value
            var response = instance.GetCallbacksCallbackId(callbackId);
            Assert.IsInstanceOf<CallbackConversation> (response, "response is CallbackConversation");
        }
        
        /// <summary>
        /// Test GetCallbacksCallbackIdParticipantsParticipantIdWrapup
        /// </summary>
        [Test]
        public void GetCallbacksCallbackIdParticipantsParticipantIdWrapupTest()
        {
            // TODO: add unit test for the method 'GetCallbacksCallbackIdParticipantsParticipantIdWrapup'
            string callbackId = null; // TODO: replace null with proper value
            string participantId = null; // TODO: replace null with proper value
            bool? provisional = null; // TODO: replace null with proper value
            var response = instance.GetCallbacksCallbackIdParticipantsParticipantIdWrapup(callbackId, participantId, provisional);
            Assert.IsInstanceOf<Wrapup> (response, "response is Wrapup");
        }
        
        /// <summary>
        /// Test GetCallbacksCallbackIdParticipantsParticipantIdWrapupcodes
        /// </summary>
        [Test]
        public void GetCallbacksCallbackIdParticipantsParticipantIdWrapupcodesTest()
        {
            // TODO: add unit test for the method 'GetCallbacksCallbackIdParticipantsParticipantIdWrapupcodes'
            string callbackId = null; // TODO: replace null with proper value
            string participantId = null; // TODO: replace null with proper value
            var response = instance.GetCallbacksCallbackIdParticipantsParticipantIdWrapupcodes(callbackId, participantId);
            Assert.IsInstanceOf<List<WrapupCode>> (response, "response is List<WrapupCode>");
        }
        
        /// <summary>
        /// Test GetCalls
        /// </summary>
        [Test]
        public void GetCallsTest()
        {
            // TODO: add unit test for the method 'GetCalls'
            var response = instance.GetCalls();
            Assert.IsInstanceOf<CallConversationEntityListing> (response, "response is CallConversationEntityListing");
        }
        
        /// <summary>
        /// Test GetCallsCallId
        /// </summary>
        [Test]
        public void GetCallsCallIdTest()
        {
            // TODO: add unit test for the method 'GetCallsCallId'
            string callId = null; // TODO: replace null with proper value
            var response = instance.GetCallsCallId(callId);
            Assert.IsInstanceOf<CallConversation> (response, "response is CallConversation");
        }
        
        /// <summary>
        /// Test GetCallsCallIdParticipantsParticipantIdWrapup
        /// </summary>
        [Test]
        public void GetCallsCallIdParticipantsParticipantIdWrapupTest()
        {
            // TODO: add unit test for the method 'GetCallsCallIdParticipantsParticipantIdWrapup'
            string callId = null; // TODO: replace null with proper value
            string participantId = null; // TODO: replace null with proper value
            bool? provisional = null; // TODO: replace null with proper value
            var response = instance.GetCallsCallIdParticipantsParticipantIdWrapup(callId, participantId, provisional);
            Assert.IsInstanceOf<Wrapup> (response, "response is Wrapup");
        }
        
        /// <summary>
        /// Test GetCallsCallIdParticipantsParticipantIdWrapupcodes
        /// </summary>
        [Test]
        public void GetCallsCallIdParticipantsParticipantIdWrapupcodesTest()
        {
            // TODO: add unit test for the method 'GetCallsCallIdParticipantsParticipantIdWrapupcodes'
            string callId = null; // TODO: replace null with proper value
            string participantId = null; // TODO: replace null with proper value
            var response = instance.GetCallsCallIdParticipantsParticipantIdWrapupcodes(callId, participantId);
            Assert.IsInstanceOf<List<WrapupCode>> (response, "response is List<WrapupCode>");
        }
        
        /// <summary>
        /// Test GetCallsHistory
        /// </summary>
        [Test]
        public void GetCallsHistoryTest()
        {
            // TODO: add unit test for the method 'GetCallsHistory'
            int? pageSize = null; // TODO: replace null with proper value
            int? pageNumber = null; // TODO: replace null with proper value
            string interval = null; // TODO: replace null with proper value
            var response = instance.GetCallsHistory(pageSize, pageNumber, interval);
            Assert.IsInstanceOf<CallConversationEntityListing> (response, "response is CallConversationEntityListing");
        }
        
        /// <summary>
        /// Test GetCallsMaximumconferenceparties
        /// </summary>
        [Test]
        public void GetCallsMaximumconferencepartiesTest()
        {
            // TODO: add unit test for the method 'GetCallsMaximumconferenceparties'
            var response = instance.GetCallsMaximumconferenceparties();
            Assert.IsInstanceOf<MaxParticipants> (response, "response is MaxParticipants");
        }
        
        /// <summary>
        /// Test GetChats
        /// </summary>
        [Test]
        public void GetChatsTest()
        {
            // TODO: add unit test for the method 'GetChats'
            var response = instance.GetChats();
            Assert.IsInstanceOf<ChatConversationEntityListing> (response, "response is ChatConversationEntityListing");
        }
        
        /// <summary>
        /// Test GetChatsChatId
        /// </summary>
        [Test]
        public void GetChatsChatIdTest()
        {
            // TODO: add unit test for the method 'GetChatsChatId'
            string chatId = null; // TODO: replace null with proper value
            var response = instance.GetChatsChatId(chatId);
            Assert.IsInstanceOf<ChatConversation> (response, "response is ChatConversation");
        }
        
        /// <summary>
        /// Test GetChatsChatIdParticipantsParticipantIdWrapup
        /// </summary>
        [Test]
        public void GetChatsChatIdParticipantsParticipantIdWrapupTest()
        {
            // TODO: add unit test for the method 'GetChatsChatIdParticipantsParticipantIdWrapup'
            string chatId = null; // TODO: replace null with proper value
            string participantId = null; // TODO: replace null with proper value
            bool? provisional = null; // TODO: replace null with proper value
            var response = instance.GetChatsChatIdParticipantsParticipantIdWrapup(chatId, participantId, provisional);
            Assert.IsInstanceOf<Wrapup> (response, "response is Wrapup");
        }
        
        /// <summary>
        /// Test GetChatsChatIdParticipantsParticipantIdWrapupcodes
        /// </summary>
        [Test]
        public void GetChatsChatIdParticipantsParticipantIdWrapupcodesTest()
        {
            // TODO: add unit test for the method 'GetChatsChatIdParticipantsParticipantIdWrapupcodes'
            string chatId = null; // TODO: replace null with proper value
            string participantId = null; // TODO: replace null with proper value
            var response = instance.GetChatsChatIdParticipantsParticipantIdWrapupcodes(chatId, participantId);
            Assert.IsInstanceOf<List<WrapupCode>> (response, "response is List<WrapupCode>");
        }
        
        /// <summary>
        /// Test GetCobrowsesessions
        /// </summary>
        [Test]
        public void GetCobrowsesessionsTest()
        {
            // TODO: add unit test for the method 'GetCobrowsesessions'
            var response = instance.GetCobrowsesessions();
            Assert.IsInstanceOf<CobrowseConversationEntityListing> (response, "response is CobrowseConversationEntityListing");
        }
        
        /// <summary>
        /// Test GetCobrowsesessionsCobrowseId
        /// </summary>
        [Test]
        public void GetCobrowsesessionsCobrowseIdTest()
        {
            // TODO: add unit test for the method 'GetCobrowsesessionsCobrowseId'
            string cobrowseId = null; // TODO: replace null with proper value
            var response = instance.GetCobrowsesessionsCobrowseId(cobrowseId);
            Assert.IsInstanceOf<CobrowseConversation> (response, "response is CobrowseConversation");
        }
        
        /// <summary>
        /// Test GetCobrowsesessionsCobrowseIdParticipantsParticipantIdWrapup
        /// </summary>
        [Test]
        public void GetCobrowsesessionsCobrowseIdParticipantsParticipantIdWrapupTest()
        {
            // TODO: add unit test for the method 'GetCobrowsesessionsCobrowseIdParticipantsParticipantIdWrapup'
            string cobrowseId = null; // TODO: replace null with proper value
            string participantId = null; // TODO: replace null with proper value
            bool? provisional = null; // TODO: replace null with proper value
            var response = instance.GetCobrowsesessionsCobrowseIdParticipantsParticipantIdWrapup(cobrowseId, participantId, provisional);
            Assert.IsInstanceOf<Wrapup> (response, "response is Wrapup");
        }
        
        /// <summary>
        /// Test GetCobrowsesessionsCobrowseIdParticipantsParticipantIdWrapupcodes
        /// </summary>
        [Test]
        public void GetCobrowsesessionsCobrowseIdParticipantsParticipantIdWrapupcodesTest()
        {
            // TODO: add unit test for the method 'GetCobrowsesessionsCobrowseIdParticipantsParticipantIdWrapupcodes'
            string cobrowseId = null; // TODO: replace null with proper value
            string participantId = null; // TODO: replace null with proper value
            var response = instance.GetCobrowsesessionsCobrowseIdParticipantsParticipantIdWrapupcodes(cobrowseId, participantId);
            Assert.IsInstanceOf<List<WrapupCode>> (response, "response is List<WrapupCode>");
        }
        
        /// <summary>
        /// Test GetConversationId
        /// </summary>
        [Test]
        public void GetConversationIdTest()
        {
            // TODO: add unit test for the method 'GetConversationId'
            string conversationId = null; // TODO: replace null with proper value
            var response = instance.GetConversationId(conversationId);
            Assert.IsInstanceOf<Conversation> (response, "response is Conversation");
        }
        
        /// <summary>
        /// Test GetConversationIdParticipantsParticipantIdWrapup
        /// </summary>
        [Test]
        public void GetConversationIdParticipantsParticipantIdWrapupTest()
        {
            // TODO: add unit test for the method 'GetConversationIdParticipantsParticipantIdWrapup'
            string conversationId = null; // TODO: replace null with proper value
            string participantId = null; // TODO: replace null with proper value
            bool? provisional = null; // TODO: replace null with proper value
            var response = instance.GetConversationIdParticipantsParticipantIdWrapup(conversationId, participantId, provisional);
            Assert.IsInstanceOf<WrapupCode> (response, "response is WrapupCode");
        }
        
        /// <summary>
        /// Test GetConversationIdParticipantsParticipantIdWrapupcodes
        /// </summary>
        [Test]
        public void GetConversationIdParticipantsParticipantIdWrapupcodesTest()
        {
            // TODO: add unit test for the method 'GetConversationIdParticipantsParticipantIdWrapupcodes'
            string conversationId = null; // TODO: replace null with proper value
            string participantId = null; // TODO: replace null with proper value
            var response = instance.GetConversationIdParticipantsParticipantIdWrapupcodes(conversationId, participantId);
            Assert.IsInstanceOf<List<WrapupCode>> (response, "response is List<WrapupCode>");
        }
        
        /// <summary>
        /// Test GetConversations
        /// </summary>
        [Test]
        public void GetConversationsTest()
        {
            // TODO: add unit test for the method 'GetConversations'
            string communicationType = null; // TODO: replace null with proper value
            var response = instance.GetConversations(communicationType);
            Assert.IsInstanceOf<ConversationEntityListing> (response, "response is ConversationEntityListing");
        }
        
        /// <summary>
        /// Test GetConversationsConversationIdDetails
        /// </summary>
        [Test]
        public void GetConversationsConversationIdDetailsTest()
        {
            // TODO: add unit test for the method 'GetConversationsConversationIdDetails'
            string conversationId = null; // TODO: replace null with proper value
            var response = instance.GetConversationsConversationIdDetails(conversationId);
            Assert.IsInstanceOf<AnalyticsConversation> (response, "response is AnalyticsConversation");
        }
        
        /// <summary>
        /// Test GetEmails
        /// </summary>
        [Test]
        public void GetEmailsTest()
        {
            // TODO: add unit test for the method 'GetEmails'
            var response = instance.GetEmails();
            Assert.IsInstanceOf<EmailConversationEntityListing> (response, "response is EmailConversationEntityListing");
        }
        
        /// <summary>
        /// Test GetEmailsEmailId
        /// </summary>
        [Test]
        public void GetEmailsEmailIdTest()
        {
            // TODO: add unit test for the method 'GetEmailsEmailId'
            string emailId = null; // TODO: replace null with proper value
            var response = instance.GetEmailsEmailId(emailId);
            Assert.IsInstanceOf<EmailConversation> (response, "response is EmailConversation");
        }
        
        /// <summary>
        /// Test GetEmailsEmailIdMessages
        /// </summary>
        [Test]
        public void GetEmailsEmailIdMessagesTest()
        {
            // TODO: add unit test for the method 'GetEmailsEmailIdMessages'
            string emailId = null; // TODO: replace null with proper value
            var response = instance.GetEmailsEmailIdMessages(emailId);
            Assert.IsInstanceOf<EmailMessageListing> (response, "response is EmailMessageListing");
        }
        
        /// <summary>
        /// Test GetEmailsEmailIdMessagesDraft
        /// </summary>
        [Test]
        public void GetEmailsEmailIdMessagesDraftTest()
        {
            // TODO: add unit test for the method 'GetEmailsEmailIdMessagesDraft'
            string emailId = null; // TODO: replace null with proper value
            var response = instance.GetEmailsEmailIdMessagesDraft(emailId);
            Assert.IsInstanceOf<EmailMessage> (response, "response is EmailMessage");
        }
        
        /// <summary>
        /// Test GetEmailsEmailIdMessagesMessageId
        /// </summary>
        [Test]
        public void GetEmailsEmailIdMessagesMessageIdTest()
        {
            // TODO: add unit test for the method 'GetEmailsEmailIdMessagesMessageId'
            string emailId = null; // TODO: replace null with proper value
            string messageId = null; // TODO: replace null with proper value
            var response = instance.GetEmailsEmailIdMessagesMessageId(emailId, messageId);
            Assert.IsInstanceOf<EmailMessage> (response, "response is EmailMessage");
        }
        
        /// <summary>
        /// Test GetEmailsEmailIdParticipantsParticipantIdWrapup
        /// </summary>
        [Test]
        public void GetEmailsEmailIdParticipantsParticipantIdWrapupTest()
        {
            // TODO: add unit test for the method 'GetEmailsEmailIdParticipantsParticipantIdWrapup'
            string emailId = null; // TODO: replace null with proper value
            string participantId = null; // TODO: replace null with proper value
            bool? provisional = null; // TODO: replace null with proper value
            var response = instance.GetEmailsEmailIdParticipantsParticipantIdWrapup(emailId, participantId, provisional);
            Assert.IsInstanceOf<Wrapup> (response, "response is Wrapup");
        }
        
        /// <summary>
        /// Test GetEmailsEmailIdParticipantsParticipantIdWrapupcodes
        /// </summary>
        [Test]
        public void GetEmailsEmailIdParticipantsParticipantIdWrapupcodesTest()
        {
            // TODO: add unit test for the method 'GetEmailsEmailIdParticipantsParticipantIdWrapupcodes'
            string emailId = null; // TODO: replace null with proper value
            string participantId = null; // TODO: replace null with proper value
            var response = instance.GetEmailsEmailIdParticipantsParticipantIdWrapupcodes(emailId, participantId);
            Assert.IsInstanceOf<List<WrapupCode>> (response, "response is List<WrapupCode>");
        }
        
        /// <summary>
        /// Test PatchCallbacksCallbackId
        /// </summary>
        [Test]
        public void PatchCallbacksCallbackIdTest()
        {
            // TODO: add unit test for the method 'PatchCallbacksCallbackId'
            string callbackId = null; // TODO: replace null with proper value
            Conversation body = null; // TODO: replace null with proper value
            var response = instance.PatchCallbacksCallbackId(callbackId, body);
            Assert.IsInstanceOf<Conversation> (response, "response is Conversation");
        }
        
        /// <summary>
        /// Test PatchCallbacksCallbackIdParticipantsParticipantId
        /// </summary>
        [Test]
        public void PatchCallbacksCallbackIdParticipantsParticipantIdTest()
        {
            // TODO: add unit test for the method 'PatchCallbacksCallbackIdParticipantsParticipantId'
            string callbackId = null; // TODO: replace null with proper value
            string participantId = null; // TODO: replace null with proper value
            MediaParticipantRequest body = null; // TODO: replace null with proper value
            instance.PatchCallbacksCallbackIdParticipantsParticipantId(callbackId, participantId, body);
            
        }
        
        /// <summary>
        /// Test PatchCallbacksCallbackIdParticipantsParticipantIdAttributes
        /// </summary>
        [Test]
        public void PatchCallbacksCallbackIdParticipantsParticipantIdAttributesTest()
        {
            // TODO: add unit test for the method 'PatchCallbacksCallbackIdParticipantsParticipantIdAttributes'
            string callbackId = null; // TODO: replace null with proper value
            string participantId = null; // TODO: replace null with proper value
            ParticipantAttributes body = null; // TODO: replace null with proper value
            instance.PatchCallbacksCallbackIdParticipantsParticipantIdAttributes(callbackId, participantId, body);
            
        }
        
        /// <summary>
        /// Test PatchCallbacksCallbackIdParticipantsParticipantIdCommunicationsCommunicationId
        /// </summary>
        [Test]
        public void PatchCallbacksCallbackIdParticipantsParticipantIdCommunicationsCommunicationIdTest()
        {
            // TODO: add unit test for the method 'PatchCallbacksCallbackIdParticipantsParticipantIdCommunicationsCommunicationId'
            string callbackId = null; // TODO: replace null with proper value
            string participantId = null; // TODO: replace null with proper value
            string communicationId = null; // TODO: replace null with proper value
            MediaParticipantRequest body = null; // TODO: replace null with proper value
            instance.PatchCallbacksCallbackIdParticipantsParticipantIdCommunicationsCommunicationId(callbackId, participantId, communicationId, body);
            
        }
        
        /// <summary>
        /// Test PatchCallsCallId
        /// </summary>
        [Test]
        public void PatchCallsCallIdTest()
        {
            // TODO: add unit test for the method 'PatchCallsCallId'
            string callId = null; // TODO: replace null with proper value
            Conversation body = null; // TODO: replace null with proper value
            var response = instance.PatchCallsCallId(callId, body);
            Assert.IsInstanceOf<Conversation> (response, "response is Conversation");
        }
        
        /// <summary>
        /// Test PatchCallsCallIdParticipantsParticipantId
        /// </summary>
        [Test]
        public void PatchCallsCallIdParticipantsParticipantIdTest()
        {
            // TODO: add unit test for the method 'PatchCallsCallIdParticipantsParticipantId'
            string callId = null; // TODO: replace null with proper value
            string participantId = null; // TODO: replace null with proper value
            MediaParticipantRequest body = null; // TODO: replace null with proper value
            instance.PatchCallsCallIdParticipantsParticipantId(callId, participantId, body);
            
        }
        
        /// <summary>
        /// Test PatchCallsCallIdParticipantsParticipantIdAttributes
        /// </summary>
        [Test]
        public void PatchCallsCallIdParticipantsParticipantIdAttributesTest()
        {
            // TODO: add unit test for the method 'PatchCallsCallIdParticipantsParticipantIdAttributes'
            string callId = null; // TODO: replace null with proper value
            string participantId = null; // TODO: replace null with proper value
            ParticipantAttributes body = null; // TODO: replace null with proper value
            instance.PatchCallsCallIdParticipantsParticipantIdAttributes(callId, participantId, body);
            
        }
        
        /// <summary>
        /// Test PatchCallsCallIdParticipantsParticipantIdCommunicationsCommunicationId
        /// </summary>
        [Test]
        public void PatchCallsCallIdParticipantsParticipantIdCommunicationsCommunicationIdTest()
        {
            // TODO: add unit test for the method 'PatchCallsCallIdParticipantsParticipantIdCommunicationsCommunicationId'
            string callId = null; // TODO: replace null with proper value
            string participantId = null; // TODO: replace null with proper value
            string communicationId = null; // TODO: replace null with proper value
            MediaParticipantRequest body = null; // TODO: replace null with proper value
            instance.PatchCallsCallIdParticipantsParticipantIdCommunicationsCommunicationId(callId, participantId, communicationId, body);
            
        }
        
        /// <summary>
        /// Test PatchCallsCallIdParticipantsParticipantIdConsult
        /// </summary>
        [Test]
        public void PatchCallsCallIdParticipantsParticipantIdConsultTest()
        {
            // TODO: add unit test for the method 'PatchCallsCallIdParticipantsParticipantIdConsult'
            string callId = null; // TODO: replace null with proper value
            string participantId = null; // TODO: replace null with proper value
            ConsultTransferUpdate body = null; // TODO: replace null with proper value
            var response = instance.PatchCallsCallIdParticipantsParticipantIdConsult(callId, participantId, body);
            Assert.IsInstanceOf<ConsultTransferResponse> (response, "response is ConsultTransferResponse");
        }
        
        /// <summary>
        /// Test PatchChatsChatId
        /// </summary>
        [Test]
        public void PatchChatsChatIdTest()
        {
            // TODO: add unit test for the method 'PatchChatsChatId'
            string chatId = null; // TODO: replace null with proper value
            Conversation body = null; // TODO: replace null with proper value
            var response = instance.PatchChatsChatId(chatId, body);
            Assert.IsInstanceOf<Conversation> (response, "response is Conversation");
        }
        
        /// <summary>
        /// Test PatchChatsChatIdParticipantsParticipantId
        /// </summary>
        [Test]
        public void PatchChatsChatIdParticipantsParticipantIdTest()
        {
            // TODO: add unit test for the method 'PatchChatsChatIdParticipantsParticipantId'
            string chatId = null; // TODO: replace null with proper value
            string participantId = null; // TODO: replace null with proper value
            MediaParticipantRequest body = null; // TODO: replace null with proper value
            instance.PatchChatsChatIdParticipantsParticipantId(chatId, participantId, body);
            
        }
        
        /// <summary>
        /// Test PatchChatsChatIdParticipantsParticipantIdAttributes
        /// </summary>
        [Test]
        public void PatchChatsChatIdParticipantsParticipantIdAttributesTest()
        {
            // TODO: add unit test for the method 'PatchChatsChatIdParticipantsParticipantIdAttributes'
            string chatId = null; // TODO: replace null with proper value
            string participantId = null; // TODO: replace null with proper value
            ParticipantAttributes body = null; // TODO: replace null with proper value
            instance.PatchChatsChatIdParticipantsParticipantIdAttributes(chatId, participantId, body);
            
        }
        
        /// <summary>
        /// Test PatchChatsChatIdParticipantsParticipantIdCommunicationsCommunicationId
        /// </summary>
        [Test]
        public void PatchChatsChatIdParticipantsParticipantIdCommunicationsCommunicationIdTest()
        {
            // TODO: add unit test for the method 'PatchChatsChatIdParticipantsParticipantIdCommunicationsCommunicationId'
            string chatId = null; // TODO: replace null with proper value
            string participantId = null; // TODO: replace null with proper value
            string communicationId = null; // TODO: replace null with proper value
            MediaParticipantRequest body = null; // TODO: replace null with proper value
            instance.PatchChatsChatIdParticipantsParticipantIdCommunicationsCommunicationId(chatId, participantId, communicationId, body);
            
        }
        
        /// <summary>
        /// Test PatchCobrowsesessionsCobrowseId
        /// </summary>
        [Test]
        public void PatchCobrowsesessionsCobrowseIdTest()
        {
            // TODO: add unit test for the method 'PatchCobrowsesessionsCobrowseId'
            string cobrowseId = null; // TODO: replace null with proper value
            Conversation body = null; // TODO: replace null with proper value
            var response = instance.PatchCobrowsesessionsCobrowseId(cobrowseId, body);
            Assert.IsInstanceOf<Conversation> (response, "response is Conversation");
        }
        
        /// <summary>
        /// Test PatchCobrowsesessionsCobrowseIdParticipantsParticipantId
        /// </summary>
        [Test]
        public void PatchCobrowsesessionsCobrowseIdParticipantsParticipantIdTest()
        {
            // TODO: add unit test for the method 'PatchCobrowsesessionsCobrowseIdParticipantsParticipantId'
            string cobrowseId = null; // TODO: replace null with proper value
            string participantId = null; // TODO: replace null with proper value
            MediaParticipantRequest body = null; // TODO: replace null with proper value
            instance.PatchCobrowsesessionsCobrowseIdParticipantsParticipantId(cobrowseId, participantId, body);
            
        }
        
        /// <summary>
        /// Test PatchCobrowsesessionsCobrowseIdParticipantsParticipantIdAttributes
        /// </summary>
        [Test]
        public void PatchCobrowsesessionsCobrowseIdParticipantsParticipantIdAttributesTest()
        {
            // TODO: add unit test for the method 'PatchCobrowsesessionsCobrowseIdParticipantsParticipantIdAttributes'
            string cobrowseId = null; // TODO: replace null with proper value
            string participantId = null; // TODO: replace null with proper value
            ParticipantAttributes body = null; // TODO: replace null with proper value
            instance.PatchCobrowsesessionsCobrowseIdParticipantsParticipantIdAttributes(cobrowseId, participantId, body);
            
        }
        
        /// <summary>
        /// Test PatchCobrowsesessionsCobrowseIdParticipantsParticipantIdCommunicationsCommunicationId
        /// </summary>
        [Test]
        public void PatchCobrowsesessionsCobrowseIdParticipantsParticipantIdCommunicationsCommunicationIdTest()
        {
            // TODO: add unit test for the method 'PatchCobrowsesessionsCobrowseIdParticipantsParticipantIdCommunicationsCommunicationId'
            string cobrowseId = null; // TODO: replace null with proper value
            string participantId = null; // TODO: replace null with proper value
            string communicationId = null; // TODO: replace null with proper value
            MediaParticipantRequest body = null; // TODO: replace null with proper value
            instance.PatchCobrowsesessionsCobrowseIdParticipantsParticipantIdCommunicationsCommunicationId(cobrowseId, participantId, communicationId, body);
            
        }
        
        /// <summary>
        /// Test PatchConversationIdParticipantsParticipantId
        /// </summary>
        [Test]
        public void PatchConversationIdParticipantsParticipantIdTest()
        {
            // TODO: add unit test for the method 'PatchConversationIdParticipantsParticipantId'
            string conversationId = null; // TODO: replace null with proper value
            string participantId = null; // TODO: replace null with proper value
            MediaParticipantRequest body = null; // TODO: replace null with proper value
            instance.PatchConversationIdParticipantsParticipantId(conversationId, participantId, body);
            
        }
        
        /// <summary>
        /// Test PatchConversationIdParticipantsParticipantIdAttributes
        /// </summary>
        [Test]
        public void PatchConversationIdParticipantsParticipantIdAttributesTest()
        {
            // TODO: add unit test for the method 'PatchConversationIdParticipantsParticipantIdAttributes'
            string conversationId = null; // TODO: replace null with proper value
            string participantId = null; // TODO: replace null with proper value
            ParticipantAttributes body = null; // TODO: replace null with proper value
            instance.PatchConversationIdParticipantsParticipantIdAttributes(conversationId, participantId, body);
            
        }
        
        /// <summary>
        /// Test PatchEmailsEmailId
        /// </summary>
        [Test]
        public void PatchEmailsEmailIdTest()
        {
            // TODO: add unit test for the method 'PatchEmailsEmailId'
            string emailId = null; // TODO: replace null with proper value
            Conversation body = null; // TODO: replace null with proper value
            var response = instance.PatchEmailsEmailId(emailId, body);
            Assert.IsInstanceOf<Conversation> (response, "response is Conversation");
        }
        
        /// <summary>
        /// Test PatchEmailsEmailIdParticipantsParticipantId
        /// </summary>
        [Test]
        public void PatchEmailsEmailIdParticipantsParticipantIdTest()
        {
            // TODO: add unit test for the method 'PatchEmailsEmailIdParticipantsParticipantId'
            string emailId = null; // TODO: replace null with proper value
            string participantId = null; // TODO: replace null with proper value
            MediaParticipantRequest body = null; // TODO: replace null with proper value
            instance.PatchEmailsEmailIdParticipantsParticipantId(emailId, participantId, body);
            
        }
        
        /// <summary>
        /// Test PatchEmailsEmailIdParticipantsParticipantIdAttributes
        /// </summary>
        [Test]
        public void PatchEmailsEmailIdParticipantsParticipantIdAttributesTest()
        {
            // TODO: add unit test for the method 'PatchEmailsEmailIdParticipantsParticipantIdAttributes'
            string emailId = null; // TODO: replace null with proper value
            string participantId = null; // TODO: replace null with proper value
            ParticipantAttributes body = null; // TODO: replace null with proper value
            instance.PatchEmailsEmailIdParticipantsParticipantIdAttributes(emailId, participantId, body);
            
        }
        
        /// <summary>
        /// Test PatchEmailsEmailIdParticipantsParticipantIdCommunicationsCommunicationId
        /// </summary>
        [Test]
        public void PatchEmailsEmailIdParticipantsParticipantIdCommunicationsCommunicationIdTest()
        {
            // TODO: add unit test for the method 'PatchEmailsEmailIdParticipantsParticipantIdCommunicationsCommunicationId'
            string emailId = null; // TODO: replace null with proper value
            string participantId = null; // TODO: replace null with proper value
            string communicationId = null; // TODO: replace null with proper value
            MediaParticipantRequest body = null; // TODO: replace null with proper value
            instance.PatchEmailsEmailIdParticipantsParticipantIdCommunicationsCommunicationId(emailId, participantId, communicationId, body);
            
        }
        
        /// <summary>
        /// Test PostCallbacks
        /// </summary>
        [Test]
        public void PostCallbacksTest()
        {
            // TODO: add unit test for the method 'PostCallbacks'
            CreateCallbackCommand body = null; // TODO: replace null with proper value
            var response = instance.PostCallbacks(body);
            Assert.IsInstanceOf<CreateCallbackResponse> (response, "response is CreateCallbackResponse");
        }
        
        /// <summary>
        /// Test PostCallbacksCallbackIdParticipantsParticipantIdReplace
        /// </summary>
        [Test]
        public void PostCallbacksCallbackIdParticipantsParticipantIdReplaceTest()
        {
            // TODO: add unit test for the method 'PostCallbacksCallbackIdParticipantsParticipantIdReplace'
            string callbackId = null; // TODO: replace null with proper value
            string participantId = null; // TODO: replace null with proper value
            TransferRequest body = null; // TODO: replace null with proper value
            instance.PostCallbacksCallbackIdParticipantsParticipantIdReplace(callbackId, participantId, body);
            
        }
        
        /// <summary>
        /// Test PostCalls
        /// </summary>
        [Test]
        public void PostCallsTest()
        {
            // TODO: add unit test for the method 'PostCalls'
            CreateCallRequest body = null; // TODO: replace null with proper value
            var response = instance.PostCalls(body);
            Assert.IsInstanceOf<CreateCallResponse> (response, "response is CreateCallResponse");
        }
        
        /// <summary>
        /// Test PostCallsCallId
        /// </summary>
        [Test]
        public void PostCallsCallIdTest()
        {
            // TODO: add unit test for the method 'PostCallsCallId'
            string callId = null; // TODO: replace null with proper value
            CallCommand body = null; // TODO: replace null with proper value
            var response = instance.PostCallsCallId(callId, body);
            Assert.IsInstanceOf<Conversation> (response, "response is Conversation");
        }
        
        /// <summary>
        /// Test PostCallsCallIdParticipants
        /// </summary>
        [Test]
        public void PostCallsCallIdParticipantsTest()
        {
            // TODO: add unit test for the method 'PostCallsCallIdParticipants'
            string callId = null; // TODO: replace null with proper value
            Conversation body = null; // TODO: replace null with proper value
            var response = instance.PostCallsCallIdParticipants(callId, body);
            Assert.IsInstanceOf<Conversation> (response, "response is Conversation");
        }
        
        /// <summary>
        /// Test PostCallsCallIdParticipantsParticipantIdConsult
        /// </summary>
        [Test]
        public void PostCallsCallIdParticipantsParticipantIdConsultTest()
        {
            // TODO: add unit test for the method 'PostCallsCallIdParticipantsParticipantIdConsult'
            string callId = null; // TODO: replace null with proper value
            string participantId = null; // TODO: replace null with proper value
            ConsultTransfer body = null; // TODO: replace null with proper value
            var response = instance.PostCallsCallIdParticipantsParticipantIdConsult(callId, participantId, body);
            Assert.IsInstanceOf<ConsultTransferResponse> (response, "response is ConsultTransferResponse");
        }
        
        /// <summary>
        /// Test PostCallsCallIdParticipantsParticipantIdMonitor
        /// </summary>
        [Test]
        public void PostCallsCallIdParticipantsParticipantIdMonitorTest()
        {
            // TODO: add unit test for the method 'PostCallsCallIdParticipantsParticipantIdMonitor'
            string callId = null; // TODO: replace null with proper value
            string participantId = null; // TODO: replace null with proper value
            instance.PostCallsCallIdParticipantsParticipantIdMonitor(callId, participantId);
            
        }
        
        /// <summary>
        /// Test PostCallsCallIdParticipantsParticipantIdReplace
        /// </summary>
        [Test]
        public void PostCallsCallIdParticipantsParticipantIdReplaceTest()
        {
            // TODO: add unit test for the method 'PostCallsCallIdParticipantsParticipantIdReplace'
            string callId = null; // TODO: replace null with proper value
            string participantId = null; // TODO: replace null with proper value
            TransferRequest body = null; // TODO: replace null with proper value
            instance.PostCallsCallIdParticipantsParticipantIdReplace(callId, participantId, body);
            
        }
        
        /// <summary>
        /// Test PostChatsChatIdParticipantsParticipantIdReplace
        /// </summary>
        [Test]
        public void PostChatsChatIdParticipantsParticipantIdReplaceTest()
        {
            // TODO: add unit test for the method 'PostChatsChatIdParticipantsParticipantIdReplace'
            string chatId = null; // TODO: replace null with proper value
            string participantId = null; // TODO: replace null with proper value
            TransferRequest body = null; // TODO: replace null with proper value
            instance.PostChatsChatIdParticipantsParticipantIdReplace(chatId, participantId, body);
            
        }
        
        /// <summary>
        /// Test PostCobrowsesessionsCobrowseIdParticipantsParticipantIdReplace
        /// </summary>
        [Test]
        public void PostCobrowsesessionsCobrowseIdParticipantsParticipantIdReplaceTest()
        {
            // TODO: add unit test for the method 'PostCobrowsesessionsCobrowseIdParticipantsParticipantIdReplace'
            string cobrowseId = null; // TODO: replace null with proper value
            string participantId = null; // TODO: replace null with proper value
            TransferRequest body = null; // TODO: replace null with proper value
            instance.PostCobrowsesessionsCobrowseIdParticipantsParticipantIdReplace(cobrowseId, participantId, body);
            
        }
        
        /// <summary>
        /// Test PostConversationIdParticipantsParticipantIdCallbacks
        /// </summary>
        [Test]
        public void PostConversationIdParticipantsParticipantIdCallbacksTest()
        {
            // TODO: add unit test for the method 'PostConversationIdParticipantsParticipantIdCallbacks'
            string conversationId = null; // TODO: replace null with proper value
            string participantId = null; // TODO: replace null with proper value
            CreateCallbackCommand body = null; // TODO: replace null with proper value
            instance.PostConversationIdParticipantsParticipantIdCallbacks(conversationId, participantId, body);
            
        }
        
        /// <summary>
        /// Test PostConversationIdParticipantsParticipantIdReplace
        /// </summary>
        [Test]
        public void PostConversationIdParticipantsParticipantIdReplaceTest()
        {
            // TODO: add unit test for the method 'PostConversationIdParticipantsParticipantIdReplace'
            string conversationId = null; // TODO: replace null with proper value
            string participantId = null; // TODO: replace null with proper value
            TransferRequest body = null; // TODO: replace null with proper value
            instance.PostConversationIdParticipantsParticipantIdReplace(conversationId, participantId, body);
            
        }
        
        /// <summary>
        /// Test PostConversationsAggregatesQuery
        /// </summary>
        [Test]
        public void PostConversationsAggregatesQueryTest()
        {
            // TODO: add unit test for the method 'PostConversationsAggregatesQuery'
            AggregationQuery body = null; // TODO: replace null with proper value
            var response = instance.PostConversationsAggregatesQuery(body);
            Assert.IsInstanceOf<AggregateQueryResponse> (response, "response is AggregateQueryResponse");
        }
        
        /// <summary>
        /// Test PostConversationsConversationIdDetailsProperties
        /// </summary>
        [Test]
        public void PostConversationsConversationIdDetailsPropertiesTest()
        {
            // TODO: add unit test for the method 'PostConversationsConversationIdDetailsProperties'
            string conversationId = null; // TODO: replace null with proper value
            PropertyIndexRequest body = null; // TODO: replace null with proper value
            var response = instance.PostConversationsConversationIdDetailsProperties(conversationId, body);
            Assert.IsInstanceOf<PropertyIndexRequest> (response, "response is PropertyIndexRequest");
        }
        
        /// <summary>
        /// Test PostConversationsDetailsQuery
        /// </summary>
        [Test]
        public void PostConversationsDetailsQueryTest()
        {
            // TODO: add unit test for the method 'PostConversationsDetailsQuery'
            ConversationQuery body = null; // TODO: replace null with proper value
            var response = instance.PostConversationsDetailsQuery(body);
            Assert.IsInstanceOf<AnalyticsConversationQueryResponse> (response, "response is AnalyticsConversationQueryResponse");
        }
        
        /// <summary>
        /// Test PostEmailsEmailIdMessages
        /// </summary>
        [Test]
        public void PostEmailsEmailIdMessagesTest()
        {
            // TODO: add unit test for the method 'PostEmailsEmailIdMessages'
            string emailId = null; // TODO: replace null with proper value
            EmailMessage body = null; // TODO: replace null with proper value
            var response = instance.PostEmailsEmailIdMessages(emailId, body);
            Assert.IsInstanceOf<EmailMessage> (response, "response is EmailMessage");
        }
        
        /// <summary>
        /// Test PostEmailsEmailIdParticipantsParticipantIdReplace
        /// </summary>
        [Test]
        public void PostEmailsEmailIdParticipantsParticipantIdReplaceTest()
        {
            // TODO: add unit test for the method 'PostEmailsEmailIdParticipantsParticipantIdReplace'
            string emailId = null; // TODO: replace null with proper value
            string participantId = null; // TODO: replace null with proper value
            TransferRequest body = null; // TODO: replace null with proper value
            instance.PostEmailsEmailIdParticipantsParticipantIdReplace(emailId, participantId, body);
            
        }
        
        /// <summary>
        /// Test PostFaxes
        /// </summary>
        [Test]
        public void PostFaxesTest()
        {
            // TODO: add unit test for the method 'PostFaxes'
            FaxSendRequest body = null; // TODO: replace null with proper value
            var response = instance.PostFaxes(body);
            Assert.IsInstanceOf<FaxSendResponse> (response, "response is FaxSendResponse");
        }
        
        /// <summary>
        /// Test PutEmailsEmailIdMessagesDraft
        /// </summary>
        [Test]
        public void PutEmailsEmailIdMessagesDraftTest()
        {
            // TODO: add unit test for the method 'PutEmailsEmailIdMessagesDraft'
            string emailId = null; // TODO: replace null with proper value
            EmailMessage body = null; // TODO: replace null with proper value
            var response = instance.PutEmailsEmailIdMessagesDraft(emailId, body);
            Assert.IsInstanceOf<EmailMessage> (response, "response is EmailMessage");
        }
        
    }

}
