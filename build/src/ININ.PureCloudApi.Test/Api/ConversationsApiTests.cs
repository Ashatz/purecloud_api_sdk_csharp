using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using NUnit.Framework;

using ININ.PureCloudApi.Client;
using ININ.PureCloudApi.Api;
using ININ.PureCloudApi.Model;

namespace ININ.PureCloudApi.Test
{
    /// <summary>
    ///  Class for testing ConversationsApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by Swagger Codegen.
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    [TestFixture]
    public class ConversationsApiTests
    {
        private ConversationsApi instance;

        /// <summary>
        /// Setup before each unit test
        /// </summary>
        [SetUp]
        public void Init()
        {
            instance = new ConversationsApi();
        }

        /// <summary>
        /// Clean up after each unit test
        /// </summary>
        [TearDown]
        public void Cleanup()
        {

        }

        /// <summary>
        /// Test an instance of ConversationsApi
        /// </summary>
        [Test]
        public void InstanceTest()
        {
            Assert.IsInstanceOf<ConversationsApi> (instance, "instance is a ConversationsApi");
        }

        
        /// <summary>
        /// Test DeleteCallParticipantConsult
        /// </summary>
        [Test]
        public void DeleteCallParticipantConsultTest()
        {
            // TODO: add unit test for the method 'DeleteCallParticipantConsult'
            string callId = null; // TODO: replace null with proper value
            string participantId = null; // TODO: replace null with proper value
            var response = instance.DeleteCallParticipantConsult(callId, participantId);
            Assert.IsInstanceOf<string> (response, "response is string");
        }
        
        /// <summary>
        /// Test DeleteConversationParticipantCodesAddCommunicationCode
        /// </summary>
        [Test]
        public void DeleteConversationParticipantCodesAddCommunicationCodeTest()
        {
            // TODO: add unit test for the method 'DeleteConversationParticipantCodesAddCommunicationCode'
            string conversationId = null; // TODO: replace null with proper value
            string participantId = null; // TODO: replace null with proper value
            string addCommunicationCode = null; // TODO: replace null with proper value
            instance.DeleteConversationParticipantCodesAddCommunicationCode(conversationId, participantId, addCommunicationCode);
            
        }
        
        /// <summary>
        /// Test DeleteEmailMessagesDraftAttachment
        /// </summary>
        [Test]
        public void DeleteEmailMessagesDraftAttachmentTest()
        {
            // TODO: add unit test for the method 'DeleteEmailMessagesDraftAttachment'
            string emailId = null; // TODO: replace null with proper value
            string attachmentId = null; // TODO: replace null with proper value
            var response = instance.DeleteEmailMessagesDraftAttachment(emailId, attachmentId);
            Assert.IsInstanceOf<string> (response, "response is string");
        }
        
        /// <summary>
        /// Test GetCall
        /// </summary>
        [Test]
        public void GetCallTest()
        {
            // TODO: add unit test for the method 'GetCall'
            string callId = null; // TODO: replace null with proper value
            var response = instance.GetCall(callId);
            Assert.IsInstanceOf<CallConversation> (response, "response is CallConversation");
        }
        
        /// <summary>
        /// Test GetCallParticipantWrapup
        /// </summary>
        [Test]
        public void GetCallParticipantWrapupTest()
        {
            // TODO: add unit test for the method 'GetCallParticipantWrapup'
            string callId = null; // TODO: replace null with proper value
            string participantId = null; // TODO: replace null with proper value
            bool? provisional = null; // TODO: replace null with proper value
            var response = instance.GetCallParticipantWrapup(callId, participantId, provisional);
            Assert.IsInstanceOf<Wrapup> (response, "response is Wrapup");
        }
        
        /// <summary>
        /// Test GetCallParticipantWrapupcodes
        /// </summary>
        [Test]
        public void GetCallParticipantWrapupcodesTest()
        {
            // TODO: add unit test for the method 'GetCallParticipantWrapupcodes'
            string callId = null; // TODO: replace null with proper value
            string participantId = null; // TODO: replace null with proper value
            var response = instance.GetCallParticipantWrapupcodes(callId, participantId);
            Assert.IsInstanceOf<List<WrapupCode>> (response, "response is List<WrapupCode>");
        }
        
        /// <summary>
        /// Test GetCallback
        /// </summary>
        [Test]
        public void GetCallbackTest()
        {
            // TODO: add unit test for the method 'GetCallback'
            string callbackId = null; // TODO: replace null with proper value
            var response = instance.GetCallback(callbackId);
            Assert.IsInstanceOf<CallbackConversation> (response, "response is CallbackConversation");
        }
        
        /// <summary>
        /// Test GetCallbackParticipantWrapup
        /// </summary>
        [Test]
        public void GetCallbackParticipantWrapupTest()
        {
            // TODO: add unit test for the method 'GetCallbackParticipantWrapup'
            string callbackId = null; // TODO: replace null with proper value
            string participantId = null; // TODO: replace null with proper value
            bool? provisional = null; // TODO: replace null with proper value
            var response = instance.GetCallbackParticipantWrapup(callbackId, participantId, provisional);
            Assert.IsInstanceOf<Wrapup> (response, "response is Wrapup");
        }
        
        /// <summary>
        /// Test GetCallbackParticipantWrapupcodes
        /// </summary>
        [Test]
        public void GetCallbackParticipantWrapupcodesTest()
        {
            // TODO: add unit test for the method 'GetCallbackParticipantWrapupcodes'
            string callbackId = null; // TODO: replace null with proper value
            string participantId = null; // TODO: replace null with proper value
            var response = instance.GetCallbackParticipantWrapupcodes(callbackId, participantId);
            Assert.IsInstanceOf<List<WrapupCode>> (response, "response is List<WrapupCode>");
        }
        
        /// <summary>
        /// Test GetCallbacks
        /// </summary>
        [Test]
        public void GetCallbacksTest()
        {
            // TODO: add unit test for the method 'GetCallbacks'
            var response = instance.GetCallbacks();
            Assert.IsInstanceOf<CallbackConversationEntityListing> (response, "response is CallbackConversationEntityListing");
        }
        
        /// <summary>
        /// Test GetCalls
        /// </summary>
        [Test]
        public void GetCallsTest()
        {
            // TODO: add unit test for the method 'GetCalls'
            var response = instance.GetCalls();
            Assert.IsInstanceOf<CallConversationEntityListing> (response, "response is CallConversationEntityListing");
        }
        
        /// <summary>
        /// Test GetCallsHistory
        /// </summary>
        [Test]
        public void GetCallsHistoryTest()
        {
            // TODO: add unit test for the method 'GetCallsHistory'
            int? pageSize = null; // TODO: replace null with proper value
            int? pageNumber = null; // TODO: replace null with proper value
            string interval = null; // TODO: replace null with proper value
            var response = instance.GetCallsHistory(pageSize, pageNumber, interval);
            Assert.IsInstanceOf<CallConversationEntityListing> (response, "response is CallConversationEntityListing");
        }
        
        /// <summary>
        /// Test GetCallsMaximumconferenceparties
        /// </summary>
        [Test]
        public void GetCallsMaximumconferencepartiesTest()
        {
            // TODO: add unit test for the method 'GetCallsMaximumconferenceparties'
            var response = instance.GetCallsMaximumconferenceparties();
            Assert.IsInstanceOf<MaxParticipants> (response, "response is MaxParticipants");
        }
        
        /// <summary>
        /// Test GetChat
        /// </summary>
        [Test]
        public void GetChatTest()
        {
            // TODO: add unit test for the method 'GetChat'
            string chatId = null; // TODO: replace null with proper value
            var response = instance.GetChat(chatId);
            Assert.IsInstanceOf<ChatConversation> (response, "response is ChatConversation");
        }
        
        /// <summary>
        /// Test GetChatParticipantWrapup
        /// </summary>
        [Test]
        public void GetChatParticipantWrapupTest()
        {
            // TODO: add unit test for the method 'GetChatParticipantWrapup'
            string chatId = null; // TODO: replace null with proper value
            string participantId = null; // TODO: replace null with proper value
            bool? provisional = null; // TODO: replace null with proper value
            var response = instance.GetChatParticipantWrapup(chatId, participantId, provisional);
            Assert.IsInstanceOf<Wrapup> (response, "response is Wrapup");
        }
        
        /// <summary>
        /// Test GetChatParticipantWrapupcodes
        /// </summary>
        [Test]
        public void GetChatParticipantWrapupcodesTest()
        {
            // TODO: add unit test for the method 'GetChatParticipantWrapupcodes'
            string chatId = null; // TODO: replace null with proper value
            string participantId = null; // TODO: replace null with proper value
            var response = instance.GetChatParticipantWrapupcodes(chatId, participantId);
            Assert.IsInstanceOf<List<WrapupCode>> (response, "response is List<WrapupCode>");
        }
        
        /// <summary>
        /// Test GetChats
        /// </summary>
        [Test]
        public void GetChatsTest()
        {
            // TODO: add unit test for the method 'GetChats'
            var response = instance.GetChats();
            Assert.IsInstanceOf<ChatConversationEntityListing> (response, "response is ChatConversationEntityListing");
        }
        
        /// <summary>
        /// Test GetConversation
        /// </summary>
        [Test]
        public void GetConversationTest()
        {
            // TODO: add unit test for the method 'GetConversation'
            string conversationId = null; // TODO: replace null with proper value
            var response = instance.GetConversation(conversationId);
            Assert.IsInstanceOf<Conversation> (response, "response is Conversation");
        }
        
        /// <summary>
        /// Test GetConversationDetails
        /// </summary>
        [Test]
        public void GetConversationDetailsTest()
        {
            // TODO: add unit test for the method 'GetConversationDetails'
            string conversationId = null; // TODO: replace null with proper value
            var response = instance.GetConversationDetails(conversationId);
            Assert.IsInstanceOf<AnalyticsConversation> (response, "response is AnalyticsConversation");
        }
        
        /// <summary>
        /// Test GetConversationParticipantWrapup
        /// </summary>
        [Test]
        public void GetConversationParticipantWrapupTest()
        {
            // TODO: add unit test for the method 'GetConversationParticipantWrapup'
            string conversationId = null; // TODO: replace null with proper value
            string participantId = null; // TODO: replace null with proper value
            bool? provisional = null; // TODO: replace null with proper value
            var response = instance.GetConversationParticipantWrapup(conversationId, participantId, provisional);
            Assert.IsInstanceOf<WrapupCode> (response, "response is WrapupCode");
        }
        
        /// <summary>
        /// Test GetConversationParticipantWrapupcodes
        /// </summary>
        [Test]
        public void GetConversationParticipantWrapupcodesTest()
        {
            // TODO: add unit test for the method 'GetConversationParticipantWrapupcodes'
            string conversationId = null; // TODO: replace null with proper value
            string participantId = null; // TODO: replace null with proper value
            var response = instance.GetConversationParticipantWrapupcodes(conversationId, participantId);
            Assert.IsInstanceOf<List<WrapupCode>> (response, "response is List<WrapupCode>");
        }
        
        /// <summary>
        /// Test GetConversations
        /// </summary>
        [Test]
        public void GetConversationsTest()
        {
            // TODO: add unit test for the method 'GetConversations'
            string communicationType = null; // TODO: replace null with proper value
            var response = instance.GetConversations(communicationType);
            Assert.IsInstanceOf<ConversationEntityListing> (response, "response is ConversationEntityListing");
        }
        
        /// <summary>
        /// Test GetEmail
        /// </summary>
        [Test]
        public void GetEmailTest()
        {
            // TODO: add unit test for the method 'GetEmail'
            string emailId = null; // TODO: replace null with proper value
            var response = instance.GetEmail(emailId);
            Assert.IsInstanceOf<EmailConversation> (response, "response is EmailConversation");
        }
        
        /// <summary>
        /// Test GetEmailMessage
        /// </summary>
        [Test]
        public void GetEmailMessageTest()
        {
            // TODO: add unit test for the method 'GetEmailMessage'
            string emailId = null; // TODO: replace null with proper value
            string messageId = null; // TODO: replace null with proper value
            var response = instance.GetEmailMessage(emailId, messageId);
            Assert.IsInstanceOf<EmailMessage> (response, "response is EmailMessage");
        }
        
        /// <summary>
        /// Test GetEmailMessages
        /// </summary>
        [Test]
        public void GetEmailMessagesTest()
        {
            // TODO: add unit test for the method 'GetEmailMessages'
            string emailId = null; // TODO: replace null with proper value
            var response = instance.GetEmailMessages(emailId);
            Assert.IsInstanceOf<EmailMessageListing> (response, "response is EmailMessageListing");
        }
        
        /// <summary>
        /// Test GetEmailMessagesDraft
        /// </summary>
        [Test]
        public void GetEmailMessagesDraftTest()
        {
            // TODO: add unit test for the method 'GetEmailMessagesDraft'
            string emailId = null; // TODO: replace null with proper value
            var response = instance.GetEmailMessagesDraft(emailId);
            Assert.IsInstanceOf<EmailMessage> (response, "response is EmailMessage");
        }
        
        /// <summary>
        /// Test GetEmailParticipantWrapup
        /// </summary>
        [Test]
        public void GetEmailParticipantWrapupTest()
        {
            // TODO: add unit test for the method 'GetEmailParticipantWrapup'
            string emailId = null; // TODO: replace null with proper value
            string participantId = null; // TODO: replace null with proper value
            bool? provisional = null; // TODO: replace null with proper value
            var response = instance.GetEmailParticipantWrapup(emailId, participantId, provisional);
            Assert.IsInstanceOf<Wrapup> (response, "response is Wrapup");
        }
        
        /// <summary>
        /// Test GetEmailParticipantWrapupcodes
        /// </summary>
        [Test]
        public void GetEmailParticipantWrapupcodesTest()
        {
            // TODO: add unit test for the method 'GetEmailParticipantWrapupcodes'
            string emailId = null; // TODO: replace null with proper value
            string participantId = null; // TODO: replace null with proper value
            var response = instance.GetEmailParticipantWrapupcodes(emailId, participantId);
            Assert.IsInstanceOf<List<WrapupCode>> (response, "response is List<WrapupCode>");
        }
        
        /// <summary>
        /// Test GetEmails
        /// </summary>
        [Test]
        public void GetEmailsTest()
        {
            // TODO: add unit test for the method 'GetEmails'
            var response = instance.GetEmails();
            Assert.IsInstanceOf<EmailConversationEntityListing> (response, "response is EmailConversationEntityListing");
        }
        
        /// <summary>
        /// Test PatchCall
        /// </summary>
        [Test]
        public void PatchCallTest()
        {
            // TODO: add unit test for the method 'PatchCall'
            string callId = null; // TODO: replace null with proper value
            Conversation body = null; // TODO: replace null with proper value
            var response = instance.PatchCall(callId, body);
            Assert.IsInstanceOf<Conversation> (response, "response is Conversation");
        }
        
        /// <summary>
        /// Test PatchCallParticipant
        /// </summary>
        [Test]
        public void PatchCallParticipantTest()
        {
            // TODO: add unit test for the method 'PatchCallParticipant'
            string callId = null; // TODO: replace null with proper value
            string participantId = null; // TODO: replace null with proper value
            MediaParticipantRequest body = null; // TODO: replace null with proper value
            instance.PatchCallParticipant(callId, participantId, body);
            
        }
        
        /// <summary>
        /// Test PatchCallParticipantAttributes
        /// </summary>
        [Test]
        public void PatchCallParticipantAttributesTest()
        {
            // TODO: add unit test for the method 'PatchCallParticipantAttributes'
            string callId = null; // TODO: replace null with proper value
            string participantId = null; // TODO: replace null with proper value
            ParticipantAttributes body = null; // TODO: replace null with proper value
            instance.PatchCallParticipantAttributes(callId, participantId, body);
            
        }
        
        /// <summary>
        /// Test PatchCallParticipantCommunication
        /// </summary>
        [Test]
        public void PatchCallParticipantCommunicationTest()
        {
            // TODO: add unit test for the method 'PatchCallParticipantCommunication'
            string callId = null; // TODO: replace null with proper value
            string participantId = null; // TODO: replace null with proper value
            string communicationId = null; // TODO: replace null with proper value
            MediaParticipantRequest body = null; // TODO: replace null with proper value
            instance.PatchCallParticipantCommunication(callId, participantId, communicationId, body);
            
        }
        
        /// <summary>
        /// Test PatchCallParticipantConsult
        /// </summary>
        [Test]
        public void PatchCallParticipantConsultTest()
        {
            // TODO: add unit test for the method 'PatchCallParticipantConsult'
            string callId = null; // TODO: replace null with proper value
            string participantId = null; // TODO: replace null with proper value
            ConsultTransferUpdate body = null; // TODO: replace null with proper value
            var response = instance.PatchCallParticipantConsult(callId, participantId, body);
            Assert.IsInstanceOf<ConsultTransferResponse> (response, "response is ConsultTransferResponse");
        }
        
        /// <summary>
        /// Test PatchCallback
        /// </summary>
        [Test]
        public void PatchCallbackTest()
        {
            // TODO: add unit test for the method 'PatchCallback'
            string callbackId = null; // TODO: replace null with proper value
            Conversation body = null; // TODO: replace null with proper value
            var response = instance.PatchCallback(callbackId, body);
            Assert.IsInstanceOf<Conversation> (response, "response is Conversation");
        }
        
        /// <summary>
        /// Test PatchCallbackParticipant
        /// </summary>
        [Test]
        public void PatchCallbackParticipantTest()
        {
            // TODO: add unit test for the method 'PatchCallbackParticipant'
            string callbackId = null; // TODO: replace null with proper value
            string participantId = null; // TODO: replace null with proper value
            MediaParticipantRequest body = null; // TODO: replace null with proper value
            instance.PatchCallbackParticipant(callbackId, participantId, body);
            
        }
        
        /// <summary>
        /// Test PatchCallbackParticipantAttributes
        /// </summary>
        [Test]
        public void PatchCallbackParticipantAttributesTest()
        {
            // TODO: add unit test for the method 'PatchCallbackParticipantAttributes'
            string callbackId = null; // TODO: replace null with proper value
            string participantId = null; // TODO: replace null with proper value
            ParticipantAttributes body = null; // TODO: replace null with proper value
            instance.PatchCallbackParticipantAttributes(callbackId, participantId, body);
            
        }
        
        /// <summary>
        /// Test PatchCallbackParticipantCommunication
        /// </summary>
        [Test]
        public void PatchCallbackParticipantCommunicationTest()
        {
            // TODO: add unit test for the method 'PatchCallbackParticipantCommunication'
            string callbackId = null; // TODO: replace null with proper value
            string participantId = null; // TODO: replace null with proper value
            string communicationId = null; // TODO: replace null with proper value
            MediaParticipantRequest body = null; // TODO: replace null with proper value
            instance.PatchCallbackParticipantCommunication(callbackId, participantId, communicationId, body);
            
        }
        
        /// <summary>
        /// Test PatchChat
        /// </summary>
        [Test]
        public void PatchChatTest()
        {
            // TODO: add unit test for the method 'PatchChat'
            string chatId = null; // TODO: replace null with proper value
            Conversation body = null; // TODO: replace null with proper value
            var response = instance.PatchChat(chatId, body);
            Assert.IsInstanceOf<Conversation> (response, "response is Conversation");
        }
        
        /// <summary>
        /// Test PatchChatParticipant
        /// </summary>
        [Test]
        public void PatchChatParticipantTest()
        {
            // TODO: add unit test for the method 'PatchChatParticipant'
            string chatId = null; // TODO: replace null with proper value
            string participantId = null; // TODO: replace null with proper value
            MediaParticipantRequest body = null; // TODO: replace null with proper value
            instance.PatchChatParticipant(chatId, participantId, body);
            
        }
        
        /// <summary>
        /// Test PatchChatParticipantAttributes
        /// </summary>
        [Test]
        public void PatchChatParticipantAttributesTest()
        {
            // TODO: add unit test for the method 'PatchChatParticipantAttributes'
            string chatId = null; // TODO: replace null with proper value
            string participantId = null; // TODO: replace null with proper value
            ParticipantAttributes body = null; // TODO: replace null with proper value
            instance.PatchChatParticipantAttributes(chatId, participantId, body);
            
        }
        
        /// <summary>
        /// Test PatchChatParticipantCommunication
        /// </summary>
        [Test]
        public void PatchChatParticipantCommunicationTest()
        {
            // TODO: add unit test for the method 'PatchChatParticipantCommunication'
            string chatId = null; // TODO: replace null with proper value
            string participantId = null; // TODO: replace null with proper value
            string communicationId = null; // TODO: replace null with proper value
            MediaParticipantRequest body = null; // TODO: replace null with proper value
            instance.PatchChatParticipantCommunication(chatId, participantId, communicationId, body);
            
        }
        
        /// <summary>
        /// Test PatchConversationParticipant
        /// </summary>
        [Test]
        public void PatchConversationParticipantTest()
        {
            // TODO: add unit test for the method 'PatchConversationParticipant'
            string conversationId = null; // TODO: replace null with proper value
            string participantId = null; // TODO: replace null with proper value
            MediaParticipantRequest body = null; // TODO: replace null with proper value
            instance.PatchConversationParticipant(conversationId, participantId, body);
            
        }
        
        /// <summary>
        /// Test PatchConversationParticipantAttributes
        /// </summary>
        [Test]
        public void PatchConversationParticipantAttributesTest()
        {
            // TODO: add unit test for the method 'PatchConversationParticipantAttributes'
            string conversationId = null; // TODO: replace null with proper value
            string participantId = null; // TODO: replace null with proper value
            ParticipantAttributes body = null; // TODO: replace null with proper value
            instance.PatchConversationParticipantAttributes(conversationId, participantId, body);
            
        }
        
        /// <summary>
        /// Test PatchEmail
        /// </summary>
        [Test]
        public void PatchEmailTest()
        {
            // TODO: add unit test for the method 'PatchEmail'
            string emailId = null; // TODO: replace null with proper value
            Conversation body = null; // TODO: replace null with proper value
            var response = instance.PatchEmail(emailId, body);
            Assert.IsInstanceOf<Conversation> (response, "response is Conversation");
        }
        
        /// <summary>
        /// Test PatchEmailParticipant
        /// </summary>
        [Test]
        public void PatchEmailParticipantTest()
        {
            // TODO: add unit test for the method 'PatchEmailParticipant'
            string emailId = null; // TODO: replace null with proper value
            string participantId = null; // TODO: replace null with proper value
            MediaParticipantRequest body = null; // TODO: replace null with proper value
            instance.PatchEmailParticipant(emailId, participantId, body);
            
        }
        
        /// <summary>
        /// Test PatchEmailParticipantAttributes
        /// </summary>
        [Test]
        public void PatchEmailParticipantAttributesTest()
        {
            // TODO: add unit test for the method 'PatchEmailParticipantAttributes'
            string emailId = null; // TODO: replace null with proper value
            string participantId = null; // TODO: replace null with proper value
            ParticipantAttributes body = null; // TODO: replace null with proper value
            instance.PatchEmailParticipantAttributes(emailId, participantId, body);
            
        }
        
        /// <summary>
        /// Test PostCall
        /// </summary>
        [Test]
        public void PostCallTest()
        {
            // TODO: add unit test for the method 'PostCall'
            string callId = null; // TODO: replace null with proper value
            CallCommand body = null; // TODO: replace null with proper value
            var response = instance.PostCall(callId, body);
            Assert.IsInstanceOf<Conversation> (response, "response is Conversation");
        }
        
        /// <summary>
        /// Test PostCallParticipantConsult
        /// </summary>
        [Test]
        public void PostCallParticipantConsultTest()
        {
            // TODO: add unit test for the method 'PostCallParticipantConsult'
            string callId = null; // TODO: replace null with proper value
            string participantId = null; // TODO: replace null with proper value
            ConsultTransfer body = null; // TODO: replace null with proper value
            var response = instance.PostCallParticipantConsult(callId, participantId, body);
            Assert.IsInstanceOf<ConsultTransferResponse> (response, "response is ConsultTransferResponse");
        }
        
        /// <summary>
        /// Test PostCallParticipantMonitor
        /// </summary>
        [Test]
        public void PostCallParticipantMonitorTest()
        {
            // TODO: add unit test for the method 'PostCallParticipantMonitor'
            string callId = null; // TODO: replace null with proper value
            string participantId = null; // TODO: replace null with proper value
            instance.PostCallParticipantMonitor(callId, participantId);
            
        }
        
        /// <summary>
        /// Test PostCallParticipantReplace
        /// </summary>
        [Test]
        public void PostCallParticipantReplaceTest()
        {
            // TODO: add unit test for the method 'PostCallParticipantReplace'
            string callId = null; // TODO: replace null with proper value
            string participantId = null; // TODO: replace null with proper value
            TransferRequest body = null; // TODO: replace null with proper value
            instance.PostCallParticipantReplace(callId, participantId, body);
            
        }
        
        /// <summary>
        /// Test PostCallParticipants
        /// </summary>
        [Test]
        public void PostCallParticipantsTest()
        {
            // TODO: add unit test for the method 'PostCallParticipants'
            string callId = null; // TODO: replace null with proper value
            Conversation body = null; // TODO: replace null with proper value
            var response = instance.PostCallParticipants(callId, body);
            Assert.IsInstanceOf<Conversation> (response, "response is Conversation");
        }
        
        /// <summary>
        /// Test PostCallbackParticipantReplace
        /// </summary>
        [Test]
        public void PostCallbackParticipantReplaceTest()
        {
            // TODO: add unit test for the method 'PostCallbackParticipantReplace'
            string callbackId = null; // TODO: replace null with proper value
            string participantId = null; // TODO: replace null with proper value
            TransferRequest body = null; // TODO: replace null with proper value
            instance.PostCallbackParticipantReplace(callbackId, participantId, body);
            
        }
        
        /// <summary>
        /// Test PostCallbacks
        /// </summary>
        [Test]
        public void PostCallbacksTest()
        {
            // TODO: add unit test for the method 'PostCallbacks'
            CreateCallbackCommand body = null; // TODO: replace null with proper value
            var response = instance.PostCallbacks(body);
            Assert.IsInstanceOf<CreateCallbackResponse> (response, "response is CreateCallbackResponse");
        }
        
        /// <summary>
        /// Test PostCalls
        /// </summary>
        [Test]
        public void PostCallsTest()
        {
            // TODO: add unit test for the method 'PostCalls'
            CreateCallRequest body = null; // TODO: replace null with proper value
            var response = instance.PostCalls(body);
            Assert.IsInstanceOf<CreateCallResponse> (response, "response is CreateCallResponse");
        }
        
        /// <summary>
        /// Test PostChatParticipantReplace
        /// </summary>
        [Test]
        public void PostChatParticipantReplaceTest()
        {
            // TODO: add unit test for the method 'PostChatParticipantReplace'
            string chatId = null; // TODO: replace null with proper value
            string participantId = null; // TODO: replace null with proper value
            TransferRequest body = null; // TODO: replace null with proper value
            instance.PostChatParticipantReplace(chatId, participantId, body);
            
        }
        
        /// <summary>
        /// Test PostConversationDetailsProperties
        /// </summary>
        [Test]
        public void PostConversationDetailsPropertiesTest()
        {
            // TODO: add unit test for the method 'PostConversationDetailsProperties'
            string conversationId = null; // TODO: replace null with proper value
            PropertyIndexRequest body = null; // TODO: replace null with proper value
            var response = instance.PostConversationDetailsProperties(conversationId, body);
            Assert.IsInstanceOf<PropertyIndexRequest> (response, "response is PropertyIndexRequest");
        }
        
        /// <summary>
        /// Test PostConversationParticipantCallbacks
        /// </summary>
        [Test]
        public void PostConversationParticipantCallbacksTest()
        {
            // TODO: add unit test for the method 'PostConversationParticipantCallbacks'
            string conversationId = null; // TODO: replace null with proper value
            string participantId = null; // TODO: replace null with proper value
            CreateCallbackCommand body = null; // TODO: replace null with proper value
            instance.PostConversationParticipantCallbacks(conversationId, participantId, body);
            
        }
        
        /// <summary>
        /// Test PostConversationParticipantReplace
        /// </summary>
        [Test]
        public void PostConversationParticipantReplaceTest()
        {
            // TODO: add unit test for the method 'PostConversationParticipantReplace'
            string conversationId = null; // TODO: replace null with proper value
            string participantId = null; // TODO: replace null with proper value
            TransferRequest body = null; // TODO: replace null with proper value
            instance.PostConversationParticipantReplace(conversationId, participantId, body);
            
        }
        
        /// <summary>
        /// Test PostConversationsAggregatesQuery
        /// </summary>
        [Test]
        public void PostConversationsAggregatesQueryTest()
        {
            // TODO: add unit test for the method 'PostConversationsAggregatesQuery'
            AggregationQuery body = null; // TODO: replace null with proper value
            var response = instance.PostConversationsAggregatesQuery(body);
            Assert.IsInstanceOf<AggregateQueryResponse> (response, "response is AggregateQueryResponse");
        }
        
        /// <summary>
        /// Test PostConversationsDetailsQuery
        /// </summary>
        [Test]
        public void PostConversationsDetailsQueryTest()
        {
            // TODO: add unit test for the method 'PostConversationsDetailsQuery'
            ConversationQuery body = null; // TODO: replace null with proper value
            var response = instance.PostConversationsDetailsQuery(body);
            Assert.IsInstanceOf<AnalyticsConversationQueryResponse> (response, "response is AnalyticsConversationQueryResponse");
        }
        
        /// <summary>
        /// Test PostEmailMessages
        /// </summary>
        [Test]
        public void PostEmailMessagesTest()
        {
            // TODO: add unit test for the method 'PostEmailMessages'
            string emailId = null; // TODO: replace null with proper value
            EmailMessage body = null; // TODO: replace null with proper value
            var response = instance.PostEmailMessages(emailId, body);
            Assert.IsInstanceOf<EmailMessage> (response, "response is EmailMessage");
        }
        
        /// <summary>
        /// Test PostEmailParticipantReplace
        /// </summary>
        [Test]
        public void PostEmailParticipantReplaceTest()
        {
            // TODO: add unit test for the method 'PostEmailParticipantReplace'
            string emailId = null; // TODO: replace null with proper value
            string participantId = null; // TODO: replace null with proper value
            TransferRequest body = null; // TODO: replace null with proper value
            instance.PostEmailParticipantReplace(emailId, participantId, body);
            
        }
        
        /// <summary>
        /// Test PostFaxes
        /// </summary>
        [Test]
        public void PostFaxesTest()
        {
            // TODO: add unit test for the method 'PostFaxes'
            FaxSendRequest body = null; // TODO: replace null with proper value
            var response = instance.PostFaxes(body);
            Assert.IsInstanceOf<FaxSendResponse> (response, "response is FaxSendResponse");
        }
        
        /// <summary>
        /// Test PutEmailMessagesDraft
        /// </summary>
        [Test]
        public void PutEmailMessagesDraftTest()
        {
            // TODO: add unit test for the method 'PutEmailMessagesDraft'
            string emailId = null; // TODO: replace null with proper value
            EmailMessage body = null; // TODO: replace null with proper value
            var response = instance.PutEmailMessagesDraft(emailId, body);
            Assert.IsInstanceOf<EmailMessage> (response, "response is EmailMessage");
        }
        
    }

}
