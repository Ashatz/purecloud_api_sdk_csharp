using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using NUnit.Framework;

using ININ.PureCloudApi.Client;
using ININ.PureCloudApi.Api;
using ININ.PureCloudApi.Model;

namespace ININ.PureCloudApi.Test
{
    /// <summary>
    ///  Class for testing QualityApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by Swagger Codegen.
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    [TestFixture]
    public class QualityApiTests
    {
        private QualityApi instance;

        /// <summary>
        /// Setup before each unit test
        /// </summary>
        [SetUp]
        public void Init()
        {
            instance = new QualityApi();
        }

        /// <summary>
        /// Clean up after each unit test
        /// </summary>
        [TearDown]
        public void Cleanup()
        {

        }

        /// <summary>
        /// Test an instance of QualityApi
        /// </summary>
        [Test]
        public void InstanceTest()
        {
            Assert.IsInstanceOf<QualityApi> (instance, "instance is a QualityApi");
        }

        
        /// <summary>
        /// Test DeleteCalibration
        /// </summary>
        [Test]
        public void DeleteCalibrationTest()
        {
            // TODO: add unit test for the method 'DeleteCalibration'
            string calibrationId = null; // TODO: replace null with proper value
            string calibratorId = null; // TODO: replace null with proper value
            var response = instance.DeleteCalibration(calibrationId, calibratorId);
            Assert.IsInstanceOf<Calibration> (response, "response is Calibration");
        }
        
        /// <summary>
        /// Test DeleteConversationEvaluation
        /// </summary>
        [Test]
        public void DeleteConversationEvaluationTest()
        {
            // TODO: add unit test for the method 'DeleteConversationEvaluation'
            string conversationId = null; // TODO: replace null with proper value
            string evaluationId = null; // TODO: replace null with proper value
            string expand = null; // TODO: replace null with proper value
            var response = instance.DeleteConversationEvaluation(conversationId, evaluationId, expand);
            Assert.IsInstanceOf<Evaluation> (response, "response is Evaluation");
        }
        
        /// <summary>
        /// Test DeleteForm
        /// </summary>
        [Test]
        public void DeleteFormTest()
        {
            // TODO: add unit test for the method 'DeleteForm'
            string formId = null; // TODO: replace null with proper value
            var response = instance.DeleteForm(formId);
            Assert.IsInstanceOf<string> (response, "response is string");
        }
        
        /// <summary>
        /// Test DeleteKeywordset
        /// </summary>
        [Test]
        public void DeleteKeywordsetTest()
        {
            // TODO: add unit test for the method 'DeleteKeywordset'
            string keywordSetId = null; // TODO: replace null with proper value
            instance.DeleteKeywordset(keywordSetId);
            
        }
        
        /// <summary>
        /// Test DeleteKeywordsets
        /// </summary>
        [Test]
        public void DeleteKeywordsetsTest()
        {
            // TODO: add unit test for the method 'DeleteKeywordsets'
            string ids = null; // TODO: replace null with proper value
            var response = instance.DeleteKeywordsets(ids);
            Assert.IsInstanceOf<string> (response, "response is string");
        }
        
        /// <summary>
        /// Test GetAgentsActivity
        /// </summary>
        [Test]
        public void GetAgentsActivityTest()
        {
            // TODO: add unit test for the method 'GetAgentsActivity'
            int? pageSize = null; // TODO: replace null with proper value
            int? pageNumber = null; // TODO: replace null with proper value
            string sortBy = null; // TODO: replace null with proper value
            List<Object> expand = null; // TODO: replace null with proper value
            string nextPage = null; // TODO: replace null with proper value
            string previousPage = null; // TODO: replace null with proper value
            DateTime? startTime = null; // TODO: replace null with proper value
            DateTime? endTime = null; // TODO: replace null with proper value
            List<Object> agentUserId = null; // TODO: replace null with proper value
            string evaluatorUserId = null; // TODO: replace null with proper value
            string name = null; // TODO: replace null with proper value
            string group = null; // TODO: replace null with proper value
            var response = instance.GetAgentsActivity(pageSize, pageNumber, sortBy, expand, nextPage, previousPage, startTime, endTime, agentUserId, evaluatorUserId, name, group);
            Assert.IsInstanceOf<AgentActivityEntityListing> (response, "response is AgentActivityEntityListing");
        }
        
        /// <summary>
        /// Test GetCalibration
        /// </summary>
        [Test]
        public void GetCalibrationTest()
        {
            // TODO: add unit test for the method 'GetCalibration'
            string calibrationId = null; // TODO: replace null with proper value
            string calibratorId = null; // TODO: replace null with proper value
            var response = instance.GetCalibration(calibrationId, calibratorId);
            Assert.IsInstanceOf<Calibration> (response, "response is Calibration");
        }
        
        /// <summary>
        /// Test GetCalibrations
        /// </summary>
        [Test]
        public void GetCalibrationsTest()
        {
            // TODO: add unit test for the method 'GetCalibrations'
            string calibratorId = null; // TODO: replace null with proper value
            int? pageSize = null; // TODO: replace null with proper value
            int? pageNumber = null; // TODO: replace null with proper value
            string sortBy = null; // TODO: replace null with proper value
            List<Object> expand = null; // TODO: replace null with proper value
            string nextPage = null; // TODO: replace null with proper value
            string previousPage = null; // TODO: replace null with proper value
            string conversationId = null; // TODO: replace null with proper value
            DateTime? startTime = null; // TODO: replace null with proper value
            DateTime? endTime = null; // TODO: replace null with proper value
            var response = instance.GetCalibrations(calibratorId, pageSize, pageNumber, sortBy, expand, nextPage, previousPage, conversationId, startTime, endTime);
            Assert.IsInstanceOf<CalibrationEntityListing> (response, "response is CalibrationEntityListing");
        }
        
        /// <summary>
        /// Test GetConversationAudits
        /// </summary>
        [Test]
        public void GetConversationAuditsTest()
        {
            // TODO: add unit test for the method 'GetConversationAudits'
            string conversationId = null; // TODO: replace null with proper value
            int? pageSize = null; // TODO: replace null with proper value
            int? pageNumber = null; // TODO: replace null with proper value
            string sortBy = null; // TODO: replace null with proper value
            List<Object> expand = null; // TODO: replace null with proper value
            string nextPage = null; // TODO: replace null with proper value
            string previousPage = null; // TODO: replace null with proper value
            string recordingId = null; // TODO: replace null with proper value
            string entityType = null; // TODO: replace null with proper value
            var response = instance.GetConversationAudits(conversationId, pageSize, pageNumber, sortBy, expand, nextPage, previousPage, recordingId, entityType);
            Assert.IsInstanceOf<QualityAuditPage> (response, "response is QualityAuditPage");
        }
        
        /// <summary>
        /// Test GetConversationEvaluation
        /// </summary>
        [Test]
        public void GetConversationEvaluationTest()
        {
            // TODO: add unit test for the method 'GetConversationEvaluation'
            string conversationId = null; // TODO: replace null with proper value
            string evaluationId = null; // TODO: replace null with proper value
            string expand = null; // TODO: replace null with proper value
            var response = instance.GetConversationEvaluation(conversationId, evaluationId, expand);
            Assert.IsInstanceOf<Evaluation> (response, "response is Evaluation");
        }
        
        /// <summary>
        /// Test GetEvaluationsQuery
        /// </summary>
        [Test]
        public void GetEvaluationsQueryTest()
        {
            // TODO: add unit test for the method 'GetEvaluationsQuery'
            int? pageSize = null; // TODO: replace null with proper value
            int? pageNumber = null; // TODO: replace null with proper value
            string sortBy = null; // TODO: replace null with proper value
            List<Object> expand = null; // TODO: replace null with proper value
            string nextPage = null; // TODO: replace null with proper value
            string previousPage = null; // TODO: replace null with proper value
            string conversationId = null; // TODO: replace null with proper value
            string agentUserId = null; // TODO: replace null with proper value
            string evaluatorUserId = null; // TODO: replace null with proper value
            string queueId = null; // TODO: replace null with proper value
            string startTime = null; // TODO: replace null with proper value
            string endTime = null; // TODO: replace null with proper value
            List<Object> evaluationState = null; // TODO: replace null with proper value
            bool? isReleased = null; // TODO: replace null with proper value
            bool? agentHasRead = null; // TODO: replace null with proper value
            bool? expandAnswerTotalScores = null; // TODO: replace null with proper value
            int? maximum = null; // TODO: replace null with proper value
            var response = instance.GetEvaluationsQuery(pageSize, pageNumber, sortBy, expand, nextPage, previousPage, conversationId, agentUserId, evaluatorUserId, queueId, startTime, endTime, evaluationState, isReleased, agentHasRead, expandAnswerTotalScores, maximum);
            Assert.IsInstanceOf<EvaluationEntityListing> (response, "response is EvaluationEntityListing");
        }
        
        /// <summary>
        /// Test GetEvaluatorsActivity
        /// </summary>
        [Test]
        public void GetEvaluatorsActivityTest()
        {
            // TODO: add unit test for the method 'GetEvaluatorsActivity'
            int? pageSize = null; // TODO: replace null with proper value
            int? pageNumber = null; // TODO: replace null with proper value
            string sortBy = null; // TODO: replace null with proper value
            List<Object> expand = null; // TODO: replace null with proper value
            string nextPage = null; // TODO: replace null with proper value
            string previousPage = null; // TODO: replace null with proper value
            DateTime? startTime = null; // TODO: replace null with proper value
            DateTime? endTime = null; // TODO: replace null with proper value
            string name = null; // TODO: replace null with proper value
            List<Object> permission = null; // TODO: replace null with proper value
            string group = null; // TODO: replace null with proper value
            var response = instance.GetEvaluatorsActivity(pageSize, pageNumber, sortBy, expand, nextPage, previousPage, startTime, endTime, name, permission, group);
            Assert.IsInstanceOf<EvaluatorActivityEntityListing> (response, "response is EvaluatorActivityEntityListing");
        }
        
        /// <summary>
        /// Test GetForm
        /// </summary>
        [Test]
        public void GetFormTest()
        {
            // TODO: add unit test for the method 'GetForm'
            string formId = null; // TODO: replace null with proper value
            var response = instance.GetForm(formId);
            Assert.IsInstanceOf<EvaluationForm> (response, "response is EvaluationForm");
        }
        
        /// <summary>
        /// Test GetFormVersions
        /// </summary>
        [Test]
        public void GetFormVersionsTest()
        {
            // TODO: add unit test for the method 'GetFormVersions'
            string formId = null; // TODO: replace null with proper value
            int? pageSize = null; // TODO: replace null with proper value
            int? pageNumber = null; // TODO: replace null with proper value
            var response = instance.GetFormVersions(formId, pageSize, pageNumber);
            Assert.IsInstanceOf<EvaluationFormEntityListing> (response, "response is EvaluationFormEntityListing");
        }
        
        /// <summary>
        /// Test GetForms
        /// </summary>
        [Test]
        public void GetFormsTest()
        {
            // TODO: add unit test for the method 'GetForms'
            int? pageSize = null; // TODO: replace null with proper value
            int? pageNumber = null; // TODO: replace null with proper value
            string sortBy = null; // TODO: replace null with proper value
            string nextPage = null; // TODO: replace null with proper value
            string previousPage = null; // TODO: replace null with proper value
            string expand = null; // TODO: replace null with proper value
            string name = null; // TODO: replace null with proper value
            var response = instance.GetForms(pageSize, pageNumber, sortBy, nextPage, previousPage, expand, name);
            Assert.IsInstanceOf<EvaluationFormEntityListing> (response, "response is EvaluationFormEntityListing");
        }
        
        /// <summary>
        /// Test GetKeywordset
        /// </summary>
        [Test]
        public void GetKeywordsetTest()
        {
            // TODO: add unit test for the method 'GetKeywordset'
            string keywordSetId = null; // TODO: replace null with proper value
            var response = instance.GetKeywordset(keywordSetId);
            Assert.IsInstanceOf<KeywordSet> (response, "response is KeywordSet");
        }
        
        /// <summary>
        /// Test GetKeywordsets
        /// </summary>
        [Test]
        public void GetKeywordsetsTest()
        {
            // TODO: add unit test for the method 'GetKeywordsets'
            int? pageSize = null; // TODO: replace null with proper value
            int? pageNumber = null; // TODO: replace null with proper value
            string sortBy = null; // TODO: replace null with proper value
            List<Object> expand = null; // TODO: replace null with proper value
            string nextPage = null; // TODO: replace null with proper value
            string previousPage = null; // TODO: replace null with proper value
            string name = null; // TODO: replace null with proper value
            var response = instance.GetKeywordsets(pageSize, pageNumber, sortBy, expand, nextPage, previousPage, name);
            Assert.IsInstanceOf<KeywordSetEntityListing> (response, "response is KeywordSetEntityListing");
        }
        
        /// <summary>
        /// Test GetPublishedform
        /// </summary>
        [Test]
        public void GetPublishedformTest()
        {
            // TODO: add unit test for the method 'GetPublishedform'
            string formId = null; // TODO: replace null with proper value
            var response = instance.GetPublishedform(formId);
            Assert.IsInstanceOf<EvaluationForm> (response, "response is EvaluationForm");
        }
        
        /// <summary>
        /// Test GetPublishedforms
        /// </summary>
        [Test]
        public void GetPublishedformsTest()
        {
            // TODO: add unit test for the method 'GetPublishedforms'
            int? pageSize = null; // TODO: replace null with proper value
            int? pageNumber = null; // TODO: replace null with proper value
            string name = null; // TODO: replace null with proper value
            var response = instance.GetPublishedforms(pageSize, pageNumber, name);
            Assert.IsInstanceOf<EvaluationFormEntityListing> (response, "response is EvaluationFormEntityListing");
        }
        
        /// <summary>
        /// Test PostCalibrations
        /// </summary>
        [Test]
        public void PostCalibrationsTest()
        {
            // TODO: add unit test for the method 'PostCalibrations'
            Calibration body = null; // TODO: replace null with proper value
            string expand = null; // TODO: replace null with proper value
            var response = instance.PostCalibrations(body, expand);
            Assert.IsInstanceOf<Calibration> (response, "response is Calibration");
        }
        
        /// <summary>
        /// Test PostConversationEvaluations
        /// </summary>
        [Test]
        public void PostConversationEvaluationsTest()
        {
            // TODO: add unit test for the method 'PostConversationEvaluations'
            string conversationId = null; // TODO: replace null with proper value
            Evaluation body = null; // TODO: replace null with proper value
            string expand = null; // TODO: replace null with proper value
            var response = instance.PostConversationEvaluations(conversationId, body, expand);
            Assert.IsInstanceOf<Evaluation> (response, "response is Evaluation");
        }
        
        /// <summary>
        /// Test PostEvaluationsAggregatesQuery
        /// </summary>
        [Test]
        public void PostEvaluationsAggregatesQueryTest()
        {
            // TODO: add unit test for the method 'PostEvaluationsAggregatesQuery'
            AggregationQuery body = null; // TODO: replace null with proper value
            var response = instance.PostEvaluationsAggregatesQuery(body);
            Assert.IsInstanceOf<AggregateQueryResponse> (response, "response is AggregateQueryResponse");
        }
        
        /// <summary>
        /// Test PostEvaluationsScoring
        /// </summary>
        [Test]
        public void PostEvaluationsScoringTest()
        {
            // TODO: add unit test for the method 'PostEvaluationsScoring'
            EvaluationFormAndScoringSet body = null; // TODO: replace null with proper value
            var response = instance.PostEvaluationsScoring(body);
            Assert.IsInstanceOf<EvaluationScoringSet> (response, "response is EvaluationScoringSet");
        }
        
        /// <summary>
        /// Test PostForms
        /// </summary>
        [Test]
        public void PostFormsTest()
        {
            // TODO: add unit test for the method 'PostForms'
            EvaluationForm body = null; // TODO: replace null with proper value
            var response = instance.PostForms(body);
            Assert.IsInstanceOf<EvaluationForm> (response, "response is EvaluationForm");
        }
        
        /// <summary>
        /// Test PostKeywordsets
        /// </summary>
        [Test]
        public void PostKeywordsetsTest()
        {
            // TODO: add unit test for the method 'PostKeywordsets'
            KeywordSet body = null; // TODO: replace null with proper value
            string expand = null; // TODO: replace null with proper value
            var response = instance.PostKeywordsets(body, expand);
            Assert.IsInstanceOf<KeywordSet> (response, "response is KeywordSet");
        }
        
        /// <summary>
        /// Test PostPublishedforms
        /// </summary>
        [Test]
        public void PostPublishedformsTest()
        {
            // TODO: add unit test for the method 'PostPublishedforms'
            EvaluationForm body = null; // TODO: replace null with proper value
            var response = instance.PostPublishedforms(body);
            Assert.IsInstanceOf<EvaluationForm> (response, "response is EvaluationForm");
        }
        
        /// <summary>
        /// Test PostSpotability
        /// </summary>
        [Test]
        public void PostSpotabilityTest()
        {
            // TODO: add unit test for the method 'PostSpotability'
            KeywordSet body = null; // TODO: replace null with proper value
            var response = instance.PostSpotability(body);
            Assert.IsInstanceOf<KeywordSet> (response, "response is KeywordSet");
        }
        
        /// <summary>
        /// Test PutCalibration
        /// </summary>
        [Test]
        public void PutCalibrationTest()
        {
            // TODO: add unit test for the method 'PutCalibration'
            string calibrationId = null; // TODO: replace null with proper value
            Calibration body = null; // TODO: replace null with proper value
            var response = instance.PutCalibration(calibrationId, body);
            Assert.IsInstanceOf<Calibration> (response, "response is Calibration");
        }
        
        /// <summary>
        /// Test PutConversationEvaluation
        /// </summary>
        [Test]
        public void PutConversationEvaluationTest()
        {
            // TODO: add unit test for the method 'PutConversationEvaluation'
            string conversationId = null; // TODO: replace null with proper value
            string evaluationId = null; // TODO: replace null with proper value
            Evaluation body = null; // TODO: replace null with proper value
            string expand = null; // TODO: replace null with proper value
            var response = instance.PutConversationEvaluation(conversationId, evaluationId, body, expand);
            Assert.IsInstanceOf<Evaluation> (response, "response is Evaluation");
        }
        
        /// <summary>
        /// Test PutForm
        /// </summary>
        [Test]
        public void PutFormTest()
        {
            // TODO: add unit test for the method 'PutForm'
            string formId = null; // TODO: replace null with proper value
            EvaluationForm body = null; // TODO: replace null with proper value
            var response = instance.PutForm(formId, body);
            Assert.IsInstanceOf<EvaluationForm> (response, "response is EvaluationForm");
        }
        
        /// <summary>
        /// Test PutKeywordset
        /// </summary>
        [Test]
        public void PutKeywordsetTest()
        {
            // TODO: add unit test for the method 'PutKeywordset'
            string keywordSetId = null; // TODO: replace null with proper value
            KeywordSet body = null; // TODO: replace null with proper value
            var response = instance.PutKeywordset(keywordSetId, body);
            Assert.IsInstanceOf<KeywordSet> (response, "response is KeywordSet");
        }
        
    }

}
