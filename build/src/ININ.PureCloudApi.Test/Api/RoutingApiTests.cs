using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using NUnit.Framework;

using ININ.PureCloudApi.Client;
using ININ.PureCloudApi.Api;
using ININ.PureCloudApi.Model;

namespace ININ.PureCloudApi.Test
{
    /// <summary>
    ///  Class for testing RoutingApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by Swagger Codegen.
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    [TestFixture]
    public class RoutingApiTests
    {
        private RoutingApi instance;

        /// <summary>
        /// Setup before each unit test
        /// </summary>
        [SetUp]
        public void Init()
        {
            instance = new RoutingApi();
        }

        /// <summary>
        /// Clean up after each unit test
        /// </summary>
        [TearDown]
        public void Cleanup()
        {

        }

        /// <summary>
        /// Test an instance of RoutingApi
        /// </summary>
        [Test]
        public void InstanceTest()
        {
            Assert.IsInstanceOf<RoutingApi> (instance, "instance is a RoutingApi");
        }

        
        /// <summary>
        /// Test DeleteEmailDomain
        /// </summary>
        [Test]
        public void DeleteEmailDomainTest()
        {
            // TODO: add unit test for the method 'DeleteEmailDomain'
            string domainId = null; // TODO: replace null with proper value
            var response = instance.DeleteEmailDomain(domainId);
            Assert.IsInstanceOf<string> (response, "response is string");
        }
        
        /// <summary>
        /// Test DeleteEmailDomainsDomainNameRoute
        /// </summary>
        [Test]
        public void DeleteEmailDomainsDomainNameRouteTest()
        {
            // TODO: add unit test for the method 'DeleteEmailDomainsDomainNameRoute'
            string domainName = null; // TODO: replace null with proper value
            string routeId = null; // TODO: replace null with proper value
            var response = instance.DeleteEmailDomainsDomainNameRoute(domainName, routeId);
            Assert.IsInstanceOf<string> (response, "response is string");
        }
        
        /// <summary>
        /// Test DeleteQueue
        /// </summary>
        [Test]
        public void DeleteQueueTest()
        {
            // TODO: add unit test for the method 'DeleteQueue'
            string queueId = null; // TODO: replace null with proper value
            bool? forceDelete = null; // TODO: replace null with proper value
            var response = instance.DeleteQueue(queueId, forceDelete);
            Assert.IsInstanceOf<string> (response, "response is string");
        }
        
        /// <summary>
        /// Test DeleteQueueUser
        /// </summary>
        [Test]
        public void DeleteQueueUserTest()
        {
            // TODO: add unit test for the method 'DeleteQueueUser'
            string queueId = null; // TODO: replace null with proper value
            string memberId = null; // TODO: replace null with proper value
            var response = instance.DeleteQueueUser(queueId, memberId);
            Assert.IsInstanceOf<string> (response, "response is string");
        }
        
        /// <summary>
        /// Test DeleteQueueWrapupcode
        /// </summary>
        [Test]
        public void DeleteQueueWrapupcodeTest()
        {
            // TODO: add unit test for the method 'DeleteQueueWrapupcode'
            string queueId = null; // TODO: replace null with proper value
            string codeId = null; // TODO: replace null with proper value
            var response = instance.DeleteQueueWrapupcode(queueId, codeId);
            Assert.IsInstanceOf<string> (response, "response is string");
        }
        
        /// <summary>
        /// Test DeleteSkill
        /// </summary>
        [Test]
        public void DeleteSkillTest()
        {
            // TODO: add unit test for the method 'DeleteSkill'
            string skillId = null; // TODO: replace null with proper value
            var response = instance.DeleteSkill(skillId);
            Assert.IsInstanceOf<string> (response, "response is string");
        }
        
        /// <summary>
        /// Test DeleteUserRoutingskill
        /// </summary>
        [Test]
        public void DeleteUserRoutingskillTest()
        {
            // TODO: add unit test for the method 'DeleteUserRoutingskill'
            string userId = null; // TODO: replace null with proper value
            string skillId = null; // TODO: replace null with proper value
            var response = instance.DeleteUserRoutingskill(userId, skillId);
            Assert.IsInstanceOf<string> (response, "response is string");
        }
        
        /// <summary>
        /// Test DeleteUtilization
        /// </summary>
        [Test]
        public void DeleteUtilizationTest()
        {
            // TODO: add unit test for the method 'DeleteUtilization'
            var response = instance.DeleteUtilization();
            Assert.IsInstanceOf<string> (response, "response is string");
        }
        
        /// <summary>
        /// Test DeleteWrapupcode
        /// </summary>
        [Test]
        public void DeleteWrapupcodeTest()
        {
            // TODO: add unit test for the method 'DeleteWrapupcode'
            string codeId = null; // TODO: replace null with proper value
            var response = instance.DeleteWrapupcode(codeId);
            Assert.IsInstanceOf<string> (response, "response is string");
        }
        
        /// <summary>
        /// Test GetEmailDomains
        /// </summary>
        [Test]
        public void GetEmailDomainsTest()
        {
            // TODO: add unit test for the method 'GetEmailDomains'
            var response = instance.GetEmailDomains();
            Assert.IsInstanceOf<InboundDomainEntityListing> (response, "response is InboundDomainEntityListing");
        }
        
        /// <summary>
        /// Test GetEmailDomainsDomainNameRoute
        /// </summary>
        [Test]
        public void GetEmailDomainsDomainNameRouteTest()
        {
            // TODO: add unit test for the method 'GetEmailDomainsDomainNameRoute'
            string domainName = null; // TODO: replace null with proper value
            string routeId = null; // TODO: replace null with proper value
            var response = instance.GetEmailDomainsDomainNameRoute(domainName, routeId);
            Assert.IsInstanceOf<InboundRoute> (response, "response is InboundRoute");
        }
        
        /// <summary>
        /// Test GetEmailDomainsDomainNameRoutes
        /// </summary>
        [Test]
        public void GetEmailDomainsDomainNameRoutesTest()
        {
            // TODO: add unit test for the method 'GetEmailDomainsDomainNameRoutes'
            string domainName = null; // TODO: replace null with proper value
            var response = instance.GetEmailDomainsDomainNameRoutes(domainName);
            Assert.IsInstanceOf<InboundRouteEntityListing> (response, "response is InboundRouteEntityListing");
        }
        
        /// <summary>
        /// Test GetEmailSetup
        /// </summary>
        [Test]
        public void GetEmailSetupTest()
        {
            // TODO: add unit test for the method 'GetEmailSetup'
            var response = instance.GetEmailSetup();
            Assert.IsInstanceOf<EmailSetup> (response, "response is EmailSetup");
        }
        
        /// <summary>
        /// Test GetQueue
        /// </summary>
        [Test]
        public void GetQueueTest()
        {
            // TODO: add unit test for the method 'GetQueue'
            string queueId = null; // TODO: replace null with proper value
            var response = instance.GetQueue(queueId);
            Assert.IsInstanceOf<Queue> (response, "response is Queue");
        }
        
        /// <summary>
        /// Test GetQueueConversations
        /// </summary>
        [Test]
        public void GetQueueConversationsTest()
        {
            // TODO: add unit test for the method 'GetQueueConversations'
            string queueId = null; // TODO: replace null with proper value
            int? pageSize = null; // TODO: replace null with proper value
            int? pageNumber = null; // TODO: replace null with proper value
            var response = instance.GetQueueConversations(queueId, pageSize, pageNumber);
            Assert.IsInstanceOf<CallConversationEntityListing> (response, "response is CallConversationEntityListing");
        }
        
        /// <summary>
        /// Test GetQueueConversationsCallbacks
        /// </summary>
        [Test]
        public void GetQueueConversationsCallbacksTest()
        {
            // TODO: add unit test for the method 'GetQueueConversationsCallbacks'
            string queueId = null; // TODO: replace null with proper value
            int? pageSize = null; // TODO: replace null with proper value
            int? pageNumber = null; // TODO: replace null with proper value
            var response = instance.GetQueueConversationsCallbacks(queueId, pageSize, pageNumber);
            Assert.IsInstanceOf<CallbackConversationEntityListing> (response, "response is CallbackConversationEntityListing");
        }
        
        /// <summary>
        /// Test GetQueueConversationsCalls
        /// </summary>
        [Test]
        public void GetQueueConversationsCallsTest()
        {
            // TODO: add unit test for the method 'GetQueueConversationsCalls'
            string queueId = null; // TODO: replace null with proper value
            int? pageSize = null; // TODO: replace null with proper value
            int? pageNumber = null; // TODO: replace null with proper value
            var response = instance.GetQueueConversationsCalls(queueId, pageSize, pageNumber);
            Assert.IsInstanceOf<CallConversationEntityListing> (response, "response is CallConversationEntityListing");
        }
        
        /// <summary>
        /// Test GetQueueConversationsChats
        /// </summary>
        [Test]
        public void GetQueueConversationsChatsTest()
        {
            // TODO: add unit test for the method 'GetQueueConversationsChats'
            string queueId = null; // TODO: replace null with proper value
            int? pageSize = null; // TODO: replace null with proper value
            int? pageNumber = null; // TODO: replace null with proper value
            var response = instance.GetQueueConversationsChats(queueId, pageSize, pageNumber);
            Assert.IsInstanceOf<ChatConversationEntityListing> (response, "response is ChatConversationEntityListing");
        }
        
        /// <summary>
        /// Test GetQueueConversationsEmails
        /// </summary>
        [Test]
        public void GetQueueConversationsEmailsTest()
        {
            // TODO: add unit test for the method 'GetQueueConversationsEmails'
            string queueId = null; // TODO: replace null with proper value
            int? pageSize = null; // TODO: replace null with proper value
            int? pageNumber = null; // TODO: replace null with proper value
            var response = instance.GetQueueConversationsEmails(queueId, pageSize, pageNumber);
            Assert.IsInstanceOf<EmailConversationEntityListing> (response, "response is EmailConversationEntityListing");
        }
        
        /// <summary>
        /// Test GetQueueEstimatedwaittime
        /// </summary>
        [Test]
        public void GetQueueEstimatedwaittimeTest()
        {
            // TODO: add unit test for the method 'GetQueueEstimatedwaittime'
            string queueId = null; // TODO: replace null with proper value
            string conversationId = null; // TODO: replace null with proper value
            var response = instance.GetQueueEstimatedwaittime(queueId, conversationId);
            Assert.IsInstanceOf<EstimatedWaitTimePredictions> (response, "response is EstimatedWaitTimePredictions");
        }
        
        /// <summary>
        /// Test GetQueueUsers
        /// </summary>
        [Test]
        public void GetQueueUsersTest()
        {
            // TODO: add unit test for the method 'GetQueueUsers'
            string queueId = null; // TODO: replace null with proper value
            int? pageSize = null; // TODO: replace null with proper value
            int? pageNumber = null; // TODO: replace null with proper value
            string sortBy = null; // TODO: replace null with proper value
            string expand = null; // TODO: replace null with proper value
            bool? directMembers = null; // TODO: replace null with proper value
            var response = instance.GetQueueUsers(queueId, pageSize, pageNumber, sortBy, expand, directMembers);
            Assert.IsInstanceOf<QueueMemberEntityListing> (response, "response is QueueMemberEntityListing");
        }
        
        /// <summary>
        /// Test GetQueueWrapupcodes
        /// </summary>
        [Test]
        public void GetQueueWrapupcodesTest()
        {
            // TODO: add unit test for the method 'GetQueueWrapupcodes'
            string queueId = null; // TODO: replace null with proper value
            string codeId = null; // TODO: replace null with proper value
            var response = instance.GetQueueWrapupcodes(queueId, codeId);
            Assert.IsInstanceOf<WrapupCodeEntityListing> (response, "response is WrapupCodeEntityListing");
        }
        
        /// <summary>
        /// Test GetQueues
        /// </summary>
        [Test]
        public void GetQueuesTest()
        {
            // TODO: add unit test for the method 'GetQueues'
            int? pageSize = null; // TODO: replace null with proper value
            int? pageNumber = null; // TODO: replace null with proper value
            string sortBy = null; // TODO: replace null with proper value
            string name = null; // TODO: replace null with proper value
            bool? active = null; // TODO: replace null with proper value
            var response = instance.GetQueues(pageSize, pageNumber, sortBy, name, active);
            Assert.IsInstanceOf<QueueEntityListing> (response, "response is QueueEntityListing");
        }
        
        /// <summary>
        /// Test GetSkill
        /// </summary>
        [Test]
        public void GetSkillTest()
        {
            // TODO: add unit test for the method 'GetSkill'
            string skillId = null; // TODO: replace null with proper value
            var response = instance.GetSkill(skillId);
            Assert.IsInstanceOf<RoutingSkill> (response, "response is RoutingSkill");
        }
        
        /// <summary>
        /// Test GetSkills
        /// </summary>
        [Test]
        public void GetSkillsTest()
        {
            // TODO: add unit test for the method 'GetSkills'
            int? pageSize = null; // TODO: replace null with proper value
            int? pageNumber = null; // TODO: replace null with proper value
            var response = instance.GetSkills(pageSize, pageNumber);
            Assert.IsInstanceOf<SkillEntityListing> (response, "response is SkillEntityListing");
        }
        
        /// <summary>
        /// Test GetUserRoutingskills
        /// </summary>
        [Test]
        public void GetUserRoutingskillsTest()
        {
            // TODO: add unit test for the method 'GetUserRoutingskills'
            string userId = null; // TODO: replace null with proper value
            int? pageSize = null; // TODO: replace null with proper value
            int? pageNumber = null; // TODO: replace null with proper value
            string sortOrder = null; // TODO: replace null with proper value
            var response = instance.GetUserRoutingskills(userId, pageSize, pageNumber, sortOrder);
            Assert.IsInstanceOf<UserSkillEntityListing> (response, "response is UserSkillEntityListing");
        }
        
        /// <summary>
        /// Test GetUtilization
        /// </summary>
        [Test]
        public void GetUtilizationTest()
        {
            // TODO: add unit test for the method 'GetUtilization'
            var response = instance.GetUtilization();
            Assert.IsInstanceOf<Utilization> (response, "response is Utilization");
        }
        
        /// <summary>
        /// Test GetWrapupcode
        /// </summary>
        [Test]
        public void GetWrapupcodeTest()
        {
            // TODO: add unit test for the method 'GetWrapupcode'
            string codeId = null; // TODO: replace null with proper value
            var response = instance.GetWrapupcode(codeId);
            Assert.IsInstanceOf<WrapupCode> (response, "response is WrapupCode");
        }
        
        /// <summary>
        /// Test GetWrapupcodes
        /// </summary>
        [Test]
        public void GetWrapupcodesTest()
        {
            // TODO: add unit test for the method 'GetWrapupcodes'
            int? pageSize = null; // TODO: replace null with proper value
            int? pageNumber = null; // TODO: replace null with proper value
            string sortBy = null; // TODO: replace null with proper value
            var response = instance.GetWrapupcodes(pageSize, pageNumber, sortBy);
            Assert.IsInstanceOf<WrapupCodeEntityListing> (response, "response is WrapupCodeEntityListing");
        }
        
        /// <summary>
        /// Test PatchQueueUser
        /// </summary>
        [Test]
        public void PatchQueueUserTest()
        {
            // TODO: add unit test for the method 'PatchQueueUser'
            string queueId = null; // TODO: replace null with proper value
            string memberId = null; // TODO: replace null with proper value
            QueueMember body = null; // TODO: replace null with proper value
            var response = instance.PatchQueueUser(queueId, memberId, body);
            Assert.IsInstanceOf<QueueMember> (response, "response is QueueMember");
        }
        
        /// <summary>
        /// Test PatchQueueUsers
        /// </summary>
        [Test]
        public void PatchQueueUsersTest()
        {
            // TODO: add unit test for the method 'PatchQueueUsers'
            string queueId = null; // TODO: replace null with proper value
            List<QueueMember> body = null; // TODO: replace null with proper value
            var response = instance.PatchQueueUsers(queueId, body);
            Assert.IsInstanceOf<QueueMemberEntityListing> (response, "response is QueueMemberEntityListing");
        }
        
        /// <summary>
        /// Test PostEmailDomains
        /// </summary>
        [Test]
        public void PostEmailDomainsTest()
        {
            // TODO: add unit test for the method 'PostEmailDomains'
            InboundDomain body = null; // TODO: replace null with proper value
            var response = instance.PostEmailDomains(body);
            Assert.IsInstanceOf<InboundDomain> (response, "response is InboundDomain");
        }
        
        /// <summary>
        /// Test PostEmailDomainsDomainNameRoutes
        /// </summary>
        [Test]
        public void PostEmailDomainsDomainNameRoutesTest()
        {
            // TODO: add unit test for the method 'PostEmailDomainsDomainNameRoutes'
            string domainName = null; // TODO: replace null with proper value
            InboundRoute body = null; // TODO: replace null with proper value
            var response = instance.PostEmailDomainsDomainNameRoutes(domainName, body);
            Assert.IsInstanceOf<InboundRoute> (response, "response is InboundRoute");
        }
        
        /// <summary>
        /// Test PostQueueUsers
        /// </summary>
        [Test]
        public void PostQueueUsersTest()
        {
            // TODO: add unit test for the method 'PostQueueUsers'
            string queueId = null; // TODO: replace null with proper value
            List<QueueMember> body = null; // TODO: replace null with proper value
            bool? delete = null; // TODO: replace null with proper value
            var response = instance.PostQueueUsers(queueId, body, delete);
            Assert.IsInstanceOf<string> (response, "response is string");
        }
        
        /// <summary>
        /// Test PostQueueWrapupcodes
        /// </summary>
        [Test]
        public void PostQueueWrapupcodesTest()
        {
            // TODO: add unit test for the method 'PostQueueWrapupcodes'
            string queueId = null; // TODO: replace null with proper value
            string codeId = null; // TODO: replace null with proper value
            List<WrapupCode> body = null; // TODO: replace null with proper value
            var response = instance.PostQueueWrapupcodes(queueId, codeId, body);
            Assert.IsInstanceOf<List<WrapupCode>> (response, "response is List<WrapupCode>");
        }
        
        /// <summary>
        /// Test PostQueues
        /// </summary>
        [Test]
        public void PostQueuesTest()
        {
            // TODO: add unit test for the method 'PostQueues'
            CreateQueueRequest body = null; // TODO: replace null with proper value
            var response = instance.PostQueues(body);
            Assert.IsInstanceOf<Queue> (response, "response is Queue");
        }
        
        /// <summary>
        /// Test PostQueuesObservationsQuery
        /// </summary>
        [Test]
        public void PostQueuesObservationsQueryTest()
        {
            // TODO: add unit test for the method 'PostQueuesObservationsQuery'
            ObservationQuery body = null; // TODO: replace null with proper value
            var response = instance.PostQueuesObservationsQuery(body);
            Assert.IsInstanceOf<QualifierMappingObservationQueryResponse> (response, "response is QualifierMappingObservationQueryResponse");
        }
        
        /// <summary>
        /// Test PostSkills
        /// </summary>
        [Test]
        public void PostSkillsTest()
        {
            // TODO: add unit test for the method 'PostSkills'
            RoutingSkill body = null; // TODO: replace null with proper value
            var response = instance.PostSkills(body);
            Assert.IsInstanceOf<RoutingSkill> (response, "response is RoutingSkill");
        }
        
        /// <summary>
        /// Test PostUserRoutingskills
        /// </summary>
        [Test]
        public void PostUserRoutingskillsTest()
        {
            // TODO: add unit test for the method 'PostUserRoutingskills'
            string userId = null; // TODO: replace null with proper value
            UserRoutingSkill body = null; // TODO: replace null with proper value
            var response = instance.PostUserRoutingskills(userId, body);
            Assert.IsInstanceOf<UserRoutingSkill> (response, "response is UserRoutingSkill");
        }
        
        /// <summary>
        /// Test PostWrapupcodes
        /// </summary>
        [Test]
        public void PostWrapupcodesTest()
        {
            // TODO: add unit test for the method 'PostWrapupcodes'
            WrapupCode body = null; // TODO: replace null with proper value
            var response = instance.PostWrapupcodes(body);
            Assert.IsInstanceOf<CallableTimeSet> (response, "response is CallableTimeSet");
        }
        
        /// <summary>
        /// Test PutEmailDomainsDomainNameRoute
        /// </summary>
        [Test]
        public void PutEmailDomainsDomainNameRouteTest()
        {
            // TODO: add unit test for the method 'PutEmailDomainsDomainNameRoute'
            string domainName = null; // TODO: replace null with proper value
            string routeId = null; // TODO: replace null with proper value
            InboundRoute body = null; // TODO: replace null with proper value
            var response = instance.PutEmailDomainsDomainNameRoute(domainName, routeId, body);
            Assert.IsInstanceOf<InboundRoute> (response, "response is InboundRoute");
        }
        
        /// <summary>
        /// Test PutQueue
        /// </summary>
        [Test]
        public void PutQueueTest()
        {
            // TODO: add unit test for the method 'PutQueue'
            string queueId = null; // TODO: replace null with proper value
            Queue body = null; // TODO: replace null with proper value
            var response = instance.PutQueue(queueId, body);
            Assert.IsInstanceOf<Queue> (response, "response is Queue");
        }
        
        /// <summary>
        /// Test PutUserRoutingskill
        /// </summary>
        [Test]
        public void PutUserRoutingskillTest()
        {
            // TODO: add unit test for the method 'PutUserRoutingskill'
            string userId = null; // TODO: replace null with proper value
            string skillId = null; // TODO: replace null with proper value
            UserRoutingSkill body = null; // TODO: replace null with proper value
            var response = instance.PutUserRoutingskill(userId, skillId, body);
            Assert.IsInstanceOf<UserRoutingSkill> (response, "response is UserRoutingSkill");
        }
        
        /// <summary>
        /// Test PutUtilization
        /// </summary>
        [Test]
        public void PutUtilizationTest()
        {
            // TODO: add unit test for the method 'PutUtilization'
            Utilization body = null; // TODO: replace null with proper value
            var response = instance.PutUtilization(body);
            Assert.IsInstanceOf<Utilization> (response, "response is Utilization");
        }
        
        /// <summary>
        /// Test PutWrapupcode
        /// </summary>
        [Test]
        public void PutWrapupcodeTest()
        {
            // TODO: add unit test for the method 'PutWrapupcode'
            string codeId = null; // TODO: replace null with proper value
            WrapupCode body = null; // TODO: replace null with proper value
            var response = instance.PutWrapupcode(codeId, body);
            Assert.IsInstanceOf<WrapupCode> (response, "response is WrapupCode");
        }
        
    }

}
