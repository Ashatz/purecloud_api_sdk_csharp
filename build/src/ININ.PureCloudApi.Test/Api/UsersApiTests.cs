using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using NUnit.Framework;

using ININ.PureCloudApi.Client;
using ININ.PureCloudApi.Api;
using ININ.PureCloudApi.Model;

namespace ININ.PureCloudApi.Test
{
    /// <summary>
    ///  Class for testing UsersApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by Swagger Codegen.
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    [TestFixture]
    public class UsersApiTests
    {
        private UsersApi instance;

        /// <summary>
        /// Setup before each unit test
        /// </summary>
        [SetUp]
        public void Init()
        {
            instance = new UsersApi();
        }

        /// <summary>
        /// Clean up after each unit test
        /// </summary>
        [TearDown]
        public void Cleanup()
        {

        }

        /// <summary>
        /// Test an instance of UsersApi
        /// </summary>
        [Test]
        public void InstanceTest()
        {
            Assert.IsInstanceOf<UsersApi> (instance, "instance is a UsersApi");
        }

        
        /// <summary>
        /// Test DeleteUser
        /// </summary>
        [Test]
        public void DeleteUserTest()
        {
            // TODO: add unit test for the method 'DeleteUser'
            string userId = null; // TODO: replace null with proper value
            var response = instance.DeleteUser(userId);
            Assert.IsInstanceOf<string> (response, "response is string");
        }
        
        /// <summary>
        /// Test DeleteUserRoles
        /// </summary>
        [Test]
        public void DeleteUserRolesTest()
        {
            // TODO: add unit test for the method 'DeleteUserRoles'
            string userId = null; // TODO: replace null with proper value
            instance.DeleteUserRoles(userId);
            
        }
        
        /// <summary>
        /// Test DeleteUserRoutingskill
        /// </summary>
        [Test]
        public void DeleteUserRoutingskillTest()
        {
            // TODO: add unit test for the method 'DeleteUserRoutingskill'
            string userId = null; // TODO: replace null with proper value
            string skillId = null; // TODO: replace null with proper value
            var response = instance.DeleteUserRoutingskill(userId, skillId);
            Assert.IsInstanceOf<string> (response, "response is string");
        }
        
        /// <summary>
        /// Test DeleteUserStationAssociatedstation
        /// </summary>
        [Test]
        public void DeleteUserStationAssociatedstationTest()
        {
            // TODO: add unit test for the method 'DeleteUserStationAssociatedstation'
            string userId = null; // TODO: replace null with proper value
            instance.DeleteUserStationAssociatedstation(userId);
            
        }
        
        /// <summary>
        /// Test DeleteUserStationDefaultstation
        /// </summary>
        [Test]
        public void DeleteUserStationDefaultstationTest()
        {
            // TODO: add unit test for the method 'DeleteUserStationDefaultstation'
            string userId = null; // TODO: replace null with proper value
            instance.DeleteUserStationDefaultstation(userId);
            
        }
        
        /// <summary>
        /// Test GetMe
        /// </summary>
        [Test]
        public void GetMeTest()
        {
            // TODO: add unit test for the method 'GetMe'
            List<string> expand = null; // TODO: replace null with proper value
            var response = instance.GetMe(expand);
            Assert.IsInstanceOf<UserMe> (response, "response is UserMe");
        }
        
        /// <summary>
        /// Test GetSearch
        /// </summary>
        [Test]
        public void GetSearchTest()
        {
            // TODO: add unit test for the method 'GetSearch'
            string q64 = null; // TODO: replace null with proper value
            List<string> expand = null; // TODO: replace null with proper value
            var response = instance.GetSearch(q64, expand);
            Assert.IsInstanceOf<UsersSearchResponse> (response, "response is UsersSearchResponse");
        }
        
        /// <summary>
        /// Test GetUser
        /// </summary>
        [Test]
        public void GetUserTest()
        {
            // TODO: add unit test for the method 'GetUser'
            string userId = null; // TODO: replace null with proper value
            List<string> expand = null; // TODO: replace null with proper value
            var response = instance.GetUser(userId, expand);
            Assert.IsInstanceOf<User> (response, "response is User");
        }
        
        /// <summary>
        /// Test GetUserCallforwarding
        /// </summary>
        [Test]
        public void GetUserCallforwardingTest()
        {
            // TODO: add unit test for the method 'GetUserCallforwarding'
            string userId = null; // TODO: replace null with proper value
            var response = instance.GetUserCallforwarding(userId);
            Assert.IsInstanceOf<CallForwarding> (response, "response is CallForwarding");
        }
        
        /// <summary>
        /// Test GetUserGeolocation
        /// </summary>
        [Test]
        public void GetUserGeolocationTest()
        {
            // TODO: add unit test for the method 'GetUserGeolocation'
            string userId = null; // TODO: replace null with proper value
            string clientId = null; // TODO: replace null with proper value
            var response = instance.GetUserGeolocation(userId, clientId);
            Assert.IsInstanceOf<Geolocation> (response, "response is Geolocation");
        }
        
        /// <summary>
        /// Test GetUserOutofoffice
        /// </summary>
        [Test]
        public void GetUserOutofofficeTest()
        {
            // TODO: add unit test for the method 'GetUserOutofoffice'
            string userId = null; // TODO: replace null with proper value
            var response = instance.GetUserOutofoffice(userId);
            Assert.IsInstanceOf<OutOfOffice> (response, "response is OutOfOffice");
        }
        
        /// <summary>
        /// Test GetUserQueues
        /// </summary>
        [Test]
        public void GetUserQueuesTest()
        {
            // TODO: add unit test for the method 'GetUserQueues'
            string userId = null; // TODO: replace null with proper value
            int? pageSize = null; // TODO: replace null with proper value
            int? pageNumber = null; // TODO: replace null with proper value
            bool? joined = null; // TODO: replace null with proper value
            var response = instance.GetUserQueues(userId, pageSize, pageNumber, joined);
            Assert.IsInstanceOf<UserQueueEntityListing> (response, "response is UserQueueEntityListing");
        }
        
        /// <summary>
        /// Test GetUserRoles
        /// </summary>
        [Test]
        public void GetUserRolesTest()
        {
            // TODO: add unit test for the method 'GetUserRoles'
            string userId = null; // TODO: replace null with proper value
            var response = instance.GetUserRoles(userId);
            Assert.IsInstanceOf<UserAuthorization> (response, "response is UserAuthorization");
        }
        
        /// <summary>
        /// Test GetUserRoutingskills
        /// </summary>
        [Test]
        public void GetUserRoutingskillsTest()
        {
            // TODO: add unit test for the method 'GetUserRoutingskills'
            string userId = null; // TODO: replace null with proper value
            int? pageSize = null; // TODO: replace null with proper value
            int? pageNumber = null; // TODO: replace null with proper value
            string sortOrder = null; // TODO: replace null with proper value
            var response = instance.GetUserRoutingskills(userId, pageSize, pageNumber, sortOrder);
            Assert.IsInstanceOf<UserSkillEntityListing> (response, "response is UserSkillEntityListing");
        }
        
        /// <summary>
        /// Test GetUserRoutingstatus
        /// </summary>
        [Test]
        public void GetUserRoutingstatusTest()
        {
            // TODO: add unit test for the method 'GetUserRoutingstatus'
            string userId = null; // TODO: replace null with proper value
            var response = instance.GetUserRoutingstatus(userId);
            Assert.IsInstanceOf<RoutingStatus> (response, "response is RoutingStatus");
        }
        
        /// <summary>
        /// Test GetUserStation
        /// </summary>
        [Test]
        public void GetUserStationTest()
        {
            // TODO: add unit test for the method 'GetUserStation'
            string userId = null; // TODO: replace null with proper value
            var response = instance.GetUserStation(userId);
            Assert.IsInstanceOf<UserStations> (response, "response is UserStations");
        }
        
        /// <summary>
        /// Test GetUsers
        /// </summary>
        [Test]
        public void GetUsersTest()
        {
            // TODO: add unit test for the method 'GetUsers'
            int? pageSize = null; // TODO: replace null with proper value
            int? pageNumber = null; // TODO: replace null with proper value
            List<string> id = null; // TODO: replace null with proper value
            string sortOrder = null; // TODO: replace null with proper value
            List<string> expand = null; // TODO: replace null with proper value
            var response = instance.GetUsers(pageSize, pageNumber, id, sortOrder, expand);
            Assert.IsInstanceOf<UsersEntityListing> (response, "response is UsersEntityListing");
        }
        
        /// <summary>
        /// Test PatchUser
        /// </summary>
        [Test]
        public void PatchUserTest()
        {
            // TODO: add unit test for the method 'PatchUser'
            string userId = null; // TODO: replace null with proper value
            User body = null; // TODO: replace null with proper value
            var response = instance.PatchUser(userId, body);
            Assert.IsInstanceOf<User> (response, "response is User");
        }
        
        /// <summary>
        /// Test PatchUserCallforwarding
        /// </summary>
        [Test]
        public void PatchUserCallforwardingTest()
        {
            // TODO: add unit test for the method 'PatchUserCallforwarding'
            string userId = null; // TODO: replace null with proper value
            CallForwarding body = null; // TODO: replace null with proper value
            var response = instance.PatchUserCallforwarding(userId, body);
            Assert.IsInstanceOf<CallForwarding> (response, "response is CallForwarding");
        }
        
        /// <summary>
        /// Test PatchUserGeolocation
        /// </summary>
        [Test]
        public void PatchUserGeolocationTest()
        {
            // TODO: add unit test for the method 'PatchUserGeolocation'
            string userId = null; // TODO: replace null with proper value
            string clientId = null; // TODO: replace null with proper value
            Geolocation body = null; // TODO: replace null with proper value
            var response = instance.PatchUserGeolocation(userId, clientId, body);
            Assert.IsInstanceOf<Geolocation> (response, "response is Geolocation");
        }
        
        /// <summary>
        /// Test PatchUserQueue
        /// </summary>
        [Test]
        public void PatchUserQueueTest()
        {
            // TODO: add unit test for the method 'PatchUserQueue'
            string queueId = null; // TODO: replace null with proper value
            string userId = null; // TODO: replace null with proper value
            UserQueue body = null; // TODO: replace null with proper value
            var response = instance.PatchUserQueue(queueId, userId, body);
            Assert.IsInstanceOf<UserQueue> (response, "response is UserQueue");
        }
        
        /// <summary>
        /// Test PatchUserQueues
        /// </summary>
        [Test]
        public void PatchUserQueuesTest()
        {
            // TODO: add unit test for the method 'PatchUserQueues'
            string userId = null; // TODO: replace null with proper value
            List<UserQueue> body = null; // TODO: replace null with proper value
            var response = instance.PatchUserQueues(userId, body);
            Assert.IsInstanceOf<UserQueue> (response, "response is UserQueue");
        }
        
        /// <summary>
        /// Test PostSearch
        /// </summary>
        [Test]
        public void PostSearchTest()
        {
            // TODO: add unit test for the method 'PostSearch'
            UserSearchRequest body = null; // TODO: replace null with proper value
            var response = instance.PostSearch(body);
            Assert.IsInstanceOf<UsersSearchResponse> (response, "response is UsersSearchResponse");
        }
        
        /// <summary>
        /// Test PostUserRoutingskills
        /// </summary>
        [Test]
        public void PostUserRoutingskillsTest()
        {
            // TODO: add unit test for the method 'PostUserRoutingskills'
            string userId = null; // TODO: replace null with proper value
            UserRoutingSkill body = null; // TODO: replace null with proper value
            var response = instance.PostUserRoutingskills(userId, body);
            Assert.IsInstanceOf<UserRoutingSkill> (response, "response is UserRoutingSkill");
        }
        
        /// <summary>
        /// Test PostUsers
        /// </summary>
        [Test]
        public void PostUsersTest()
        {
            // TODO: add unit test for the method 'PostUsers'
            CreateUser body = null; // TODO: replace null with proper value
            var response = instance.PostUsers(body);
            Assert.IsInstanceOf<User> (response, "response is User");
        }
        
        /// <summary>
        /// Test PostUsersAggregatesQuery
        /// </summary>
        [Test]
        public void PostUsersAggregatesQueryTest()
        {
            // TODO: add unit test for the method 'PostUsersAggregatesQuery'
            AggregationQuery body = null; // TODO: replace null with proper value
            var response = instance.PostUsersAggregatesQuery(body);
            Assert.IsInstanceOf<PresenceQueryResponse> (response, "response is PresenceQueryResponse");
        }
        
        /// <summary>
        /// Test PostUsersObservationsQuery
        /// </summary>
        [Test]
        public void PostUsersObservationsQueryTest()
        {
            // TODO: add unit test for the method 'PostUsersObservationsQuery'
            ObservationQuery body = null; // TODO: replace null with proper value
            var response = instance.PostUsersObservationsQuery(body);
            Assert.IsInstanceOf<ObservationQueryResponse> (response, "response is ObservationQueryResponse");
        }
        
        /// <summary>
        /// Test PutUserCallforwarding
        /// </summary>
        [Test]
        public void PutUserCallforwardingTest()
        {
            // TODO: add unit test for the method 'PutUserCallforwarding'
            string userId = null; // TODO: replace null with proper value
            CallForwarding body = null; // TODO: replace null with proper value
            var response = instance.PutUserCallforwarding(userId, body);
            Assert.IsInstanceOf<CallForwarding> (response, "response is CallForwarding");
        }
        
        /// <summary>
        /// Test PutUserOutofoffice
        /// </summary>
        [Test]
        public void PutUserOutofofficeTest()
        {
            // TODO: add unit test for the method 'PutUserOutofoffice'
            string userId = null; // TODO: replace null with proper value
            OutOfOffice body = null; // TODO: replace null with proper value
            var response = instance.PutUserOutofoffice(userId, body);
            Assert.IsInstanceOf<OutOfOffice> (response, "response is OutOfOffice");
        }
        
        /// <summary>
        /// Test PutUserRoles
        /// </summary>
        [Test]
        public void PutUserRolesTest()
        {
            // TODO: add unit test for the method 'PutUserRoles'
            string userId = null; // TODO: replace null with proper value
            List<string> body = null; // TODO: replace null with proper value
            var response = instance.PutUserRoles(userId, body);
            Assert.IsInstanceOf<UserAuthorization> (response, "response is UserAuthorization");
        }
        
        /// <summary>
        /// Test PutUserRoutingskill
        /// </summary>
        [Test]
        public void PutUserRoutingskillTest()
        {
            // TODO: add unit test for the method 'PutUserRoutingskill'
            string userId = null; // TODO: replace null with proper value
            string skillId = null; // TODO: replace null with proper value
            UserRoutingSkill body = null; // TODO: replace null with proper value
            var response = instance.PutUserRoutingskill(userId, skillId, body);
            Assert.IsInstanceOf<UserRoutingSkill> (response, "response is UserRoutingSkill");
        }
        
        /// <summary>
        /// Test PutUserRoutingstatus
        /// </summary>
        [Test]
        public void PutUserRoutingstatusTest()
        {
            // TODO: add unit test for the method 'PutUserRoutingstatus'
            string userId = null; // TODO: replace null with proper value
            RoutingStatus body = null; // TODO: replace null with proper value
            var response = instance.PutUserRoutingstatus(userId, body);
            Assert.IsInstanceOf<RoutingStatus> (response, "response is RoutingStatus");
        }
        
        /// <summary>
        /// Test PutUserStationAssociatedstationStationId
        /// </summary>
        [Test]
        public void PutUserStationAssociatedstationStationIdTest()
        {
            // TODO: add unit test for the method 'PutUserStationAssociatedstationStationId'
            string userId = null; // TODO: replace null with proper value
            string stationId = null; // TODO: replace null with proper value
            instance.PutUserStationAssociatedstationStationId(userId, stationId);
            
        }
        
        /// <summary>
        /// Test PutUserStationDefaultstationStationId
        /// </summary>
        [Test]
        public void PutUserStationDefaultstationStationIdTest()
        {
            // TODO: add unit test for the method 'PutUserStationDefaultstationStationId'
            string userId = null; // TODO: replace null with proper value
            string stationId = null; // TODO: replace null with proper value
            instance.PutUserStationDefaultstationStationId(userId, stationId);
            
        }
        
    }

}
