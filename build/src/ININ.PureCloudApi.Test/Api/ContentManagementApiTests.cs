using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using NUnit.Framework;

using ININ.PureCloudApi.Client;
using ININ.PureCloudApi.Api;
using ININ.PureCloudApi.Model;

namespace ININ.PureCloudApi.Test
{
    /// <summary>
    ///  Class for testing ContentManagementApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by Swagger Codegen.
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    [TestFixture]
    public class ContentManagementApiTests
    {
        private ContentManagementApi instance;

        /// <summary>
        /// Setup before each unit test
        /// </summary>
        [SetUp]
        public void Init()
        {
            instance = new ContentManagementApi();
        }

        /// <summary>
        /// Clean up after each unit test
        /// </summary>
        [TearDown]
        public void Cleanup()
        {

        }

        /// <summary>
        /// Test an instance of ContentManagementApi
        /// </summary>
        [Test]
        public void InstanceTest()
        {
            Assert.IsInstanceOf<ContentManagementApi> (instance, "instance is a ContentManagementApi");
        }

        
        /// <summary>
        /// Test DeleteDocument
        /// </summary>
        [Test]
        public void DeleteDocumentTest()
        {
            // TODO: add unit test for the method 'DeleteDocument'
            string documentId = null; // TODO: replace null with proper value
            bool? _override = null; // TODO: replace null with proper value
            instance.DeleteDocument(documentId, _override);
            
        }
        
        /// <summary>
        /// Test DeleteShare
        /// </summary>
        [Test]
        public void DeleteShareTest()
        {
            // TODO: add unit test for the method 'DeleteShare'
            string shareId = null; // TODO: replace null with proper value
            instance.DeleteShare(shareId);
            
        }
        
        /// <summary>
        /// Test DeleteStatusStatusId
        /// </summary>
        [Test]
        public void DeleteStatusStatusIdTest()
        {
            // TODO: add unit test for the method 'DeleteStatusStatusId'
            string statusId = null; // TODO: replace null with proper value
            instance.DeleteStatusStatusId(statusId);
            
        }
        
        /// <summary>
        /// Test DeleteWorkspace
        /// </summary>
        [Test]
        public void DeleteWorkspaceTest()
        {
            // TODO: add unit test for the method 'DeleteWorkspace'
            string workspaceId = null; // TODO: replace null with proper value
            string moveChildrenToWorkspaceId = null; // TODO: replace null with proper value
            instance.DeleteWorkspace(workspaceId, moveChildrenToWorkspaceId);
            
        }
        
        /// <summary>
        /// Test DeleteWorkspaceMember
        /// </summary>
        [Test]
        public void DeleteWorkspaceMemberTest()
        {
            // TODO: add unit test for the method 'DeleteWorkspaceMember'
            string workspaceId = null; // TODO: replace null with proper value
            string memberId = null; // TODO: replace null with proper value
            instance.DeleteWorkspaceMember(workspaceId, memberId);
            
        }
        
        /// <summary>
        /// Test DeleteWorkspaceTagvalue
        /// </summary>
        [Test]
        public void DeleteWorkspaceTagvalueTest()
        {
            // TODO: add unit test for the method 'DeleteWorkspaceTagvalue'
            string workspaceId = null; // TODO: replace null with proper value
            string tagId = null; // TODO: replace null with proper value
            instance.DeleteWorkspaceTagvalue(workspaceId, tagId);
            
        }
        
        /// <summary>
        /// Test GetDocument
        /// </summary>
        [Test]
        public void GetDocumentTest()
        {
            // TODO: add unit test for the method 'GetDocument'
            string documentId = null; // TODO: replace null with proper value
            string expand = null; // TODO: replace null with proper value
            var response = instance.GetDocument(documentId, expand);
            Assert.IsInstanceOf<Document> (response, "response is Document");
        }
        
        /// <summary>
        /// Test GetDocumentAudits
        /// </summary>
        [Test]
        public void GetDocumentAuditsTest()
        {
            // TODO: add unit test for the method 'GetDocumentAudits'
            string documentId = null; // TODO: replace null with proper value
            int? pageSize = null; // TODO: replace null with proper value
            int? pageNumber = null; // TODO: replace null with proper value
            string transactionFilter = null; // TODO: replace null with proper value
            string level = null; // TODO: replace null with proper value
            string sortBy = null; // TODO: replace null with proper value
            string sortOrder = null; // TODO: replace null with proper value
            var response = instance.GetDocumentAudits(documentId, pageSize, pageNumber, transactionFilter, level, sortBy, sortOrder);
            Assert.IsInstanceOf<DocumentAuditEntityListing> (response, "response is DocumentAuditEntityListing");
        }
        
        /// <summary>
        /// Test GetDocumentContent
        /// </summary>
        [Test]
        public void GetDocumentContentTest()
        {
            // TODO: add unit test for the method 'GetDocumentContent'
            string documentId = null; // TODO: replace null with proper value
            string disposition = null; // TODO: replace null with proper value
            string contentType = null; // TODO: replace null with proper value
            instance.GetDocumentContent(documentId, disposition, contentType);
            
        }
        
        /// <summary>
        /// Test GetDocuments
        /// </summary>
        [Test]
        public void GetDocumentsTest()
        {
            // TODO: add unit test for the method 'GetDocuments'
            string workspaceId = null; // TODO: replace null with proper value
            string name = null; // TODO: replace null with proper value
            string expand = null; // TODO: replace null with proper value
            int? pageSize = null; // TODO: replace null with proper value
            int? pageNumber = null; // TODO: replace null with proper value
            string sortBy = null; // TODO: replace null with proper value
            string sortOrder = null; // TODO: replace null with proper value
            var response = instance.GetDocuments(workspaceId, name, expand, pageSize, pageNumber, sortBy, sortOrder);
            Assert.IsInstanceOf<DocumentEntityListing> (response, "response is DocumentEntityListing");
        }
        
        /// <summary>
        /// Test GetQuery
        /// </summary>
        [Test]
        public void GetQueryTest()
        {
            // TODO: add unit test for the method 'GetQuery'
            string queryPhrase = null; // TODO: replace null with proper value
            int? pageSize = null; // TODO: replace null with proper value
            int? pageNumber = null; // TODO: replace null with proper value
            string sortBy = null; // TODO: replace null with proper value
            string sortOrder = null; // TODO: replace null with proper value
            string expand = null; // TODO: replace null with proper value
            var response = instance.GetQuery(queryPhrase, pageSize, pageNumber, sortBy, sortOrder, expand);
            Assert.IsInstanceOf<QueryResults> (response, "response is QueryResults");
        }
        
        /// <summary>
        /// Test GetSecurityprofile
        /// </summary>
        [Test]
        public void GetSecurityprofileTest()
        {
            // TODO: add unit test for the method 'GetSecurityprofile'
            string securityProfileId = null; // TODO: replace null with proper value
            var response = instance.GetSecurityprofile(securityProfileId);
            Assert.IsInstanceOf<SecurityProfile> (response, "response is SecurityProfile");
        }
        
        /// <summary>
        /// Test GetSecurityprofiles
        /// </summary>
        [Test]
        public void GetSecurityprofilesTest()
        {
            // TODO: add unit test for the method 'GetSecurityprofiles'
            var response = instance.GetSecurityprofiles();
            Assert.IsInstanceOf<SecurityProfileEntityListing> (response, "response is SecurityProfileEntityListing");
        }
        
        /// <summary>
        /// Test GetShare
        /// </summary>
        [Test]
        public void GetShareTest()
        {
            // TODO: add unit test for the method 'GetShare'
            string shareId = null; // TODO: replace null with proper value
            string expand = null; // TODO: replace null with proper value
            var response = instance.GetShare(shareId, expand);
            Assert.IsInstanceOf<Share> (response, "response is Share");
        }
        
        /// <summary>
        /// Test GetSharedSharedId
        /// </summary>
        [Test]
        public void GetSharedSharedIdTest()
        {
            // TODO: add unit test for the method 'GetSharedSharedId'
            string sharedId = null; // TODO: replace null with proper value
            bool? redirect = null; // TODO: replace null with proper value
            string disposition = null; // TODO: replace null with proper value
            string contentType = null; // TODO: replace null with proper value
            string expand = null; // TODO: replace null with proper value
            instance.GetSharedSharedId(sharedId, redirect, disposition, contentType, expand);
            
        }
        
        /// <summary>
        /// Test GetShares
        /// </summary>
        [Test]
        public void GetSharesTest()
        {
            // TODO: add unit test for the method 'GetShares'
            string entityId = null; // TODO: replace null with proper value
            string expand = null; // TODO: replace null with proper value
            int? pageSize = null; // TODO: replace null with proper value
            int? pageNumber = null; // TODO: replace null with proper value
            var response = instance.GetShares(entityId, expand, pageSize, pageNumber);
            Assert.IsInstanceOf<ShareEntityListing> (response, "response is ShareEntityListing");
        }
        
        /// <summary>
        /// Test GetStatus
        /// </summary>
        [Test]
        public void GetStatusTest()
        {
            // TODO: add unit test for the method 'GetStatus'
            int? pageSize = null; // TODO: replace null with proper value
            int? pageNumber = null; // TODO: replace null with proper value
            var response = instance.GetStatus(pageSize, pageNumber);
            Assert.IsInstanceOf<CommandStatusEntityListing> (response, "response is CommandStatusEntityListing");
        }
        
        /// <summary>
        /// Test GetStatusStatusId
        /// </summary>
        [Test]
        public void GetStatusStatusIdTest()
        {
            // TODO: add unit test for the method 'GetStatusStatusId'
            string statusId = null; // TODO: replace null with proper value
            var response = instance.GetStatusStatusId(statusId);
            Assert.IsInstanceOf<CommandStatus> (response, "response is CommandStatus");
        }
        
        /// <summary>
        /// Test GetUsage
        /// </summary>
        [Test]
        public void GetUsageTest()
        {
            // TODO: add unit test for the method 'GetUsage'
            var response = instance.GetUsage();
            Assert.IsInstanceOf<Usage> (response, "response is Usage");
        }
        
        /// <summary>
        /// Test GetWorkspace
        /// </summary>
        [Test]
        public void GetWorkspaceTest()
        {
            // TODO: add unit test for the method 'GetWorkspace'
            string workspaceId = null; // TODO: replace null with proper value
            string expand = null; // TODO: replace null with proper value
            var response = instance.GetWorkspace(workspaceId, expand);
            Assert.IsInstanceOf<Workspace> (response, "response is Workspace");
        }
        
        /// <summary>
        /// Test GetWorkspaceMember
        /// </summary>
        [Test]
        public void GetWorkspaceMemberTest()
        {
            // TODO: add unit test for the method 'GetWorkspaceMember'
            string workspaceId = null; // TODO: replace null with proper value
            string memberId = null; // TODO: replace null with proper value
            string expand = null; // TODO: replace null with proper value
            var response = instance.GetWorkspaceMember(workspaceId, memberId, expand);
            Assert.IsInstanceOf<WorkspaceMember> (response, "response is WorkspaceMember");
        }
        
        /// <summary>
        /// Test GetWorkspaceMembers
        /// </summary>
        [Test]
        public void GetWorkspaceMembersTest()
        {
            // TODO: add unit test for the method 'GetWorkspaceMembers'
            string workspaceId = null; // TODO: replace null with proper value
            int? pageSize = null; // TODO: replace null with proper value
            int? pageNumber = null; // TODO: replace null with proper value
            string expand = null; // TODO: replace null with proper value
            var response = instance.GetWorkspaceMembers(workspaceId, pageSize, pageNumber, expand);
            Assert.IsInstanceOf<WorkspaceMemberEntityListing> (response, "response is WorkspaceMemberEntityListing");
        }
        
        /// <summary>
        /// Test GetWorkspaceTagvalue
        /// </summary>
        [Test]
        public void GetWorkspaceTagvalueTest()
        {
            // TODO: add unit test for the method 'GetWorkspaceTagvalue'
            string workspaceId = null; // TODO: replace null with proper value
            string tagId = null; // TODO: replace null with proper value
            string expand = null; // TODO: replace null with proper value
            var response = instance.GetWorkspaceTagvalue(workspaceId, tagId, expand);
            Assert.IsInstanceOf<TagValue> (response, "response is TagValue");
        }
        
        /// <summary>
        /// Test GetWorkspaceTagvalues
        /// </summary>
        [Test]
        public void GetWorkspaceTagvaluesTest()
        {
            // TODO: add unit test for the method 'GetWorkspaceTagvalues'
            string workspaceId = null; // TODO: replace null with proper value
            string value = null; // TODO: replace null with proper value
            int? pageSize = null; // TODO: replace null with proper value
            int? pageNumber = null; // TODO: replace null with proper value
            string expand = null; // TODO: replace null with proper value
            var response = instance.GetWorkspaceTagvalues(workspaceId, value, pageSize, pageNumber, expand);
            Assert.IsInstanceOf<TagValueEntityListing> (response, "response is TagValueEntityListing");
        }
        
        /// <summary>
        /// Test GetWorkspaces
        /// </summary>
        [Test]
        public void GetWorkspacesTest()
        {
            // TODO: add unit test for the method 'GetWorkspaces'
            int? pageSize = null; // TODO: replace null with proper value
            int? pageNumber = null; // TODO: replace null with proper value
            string access = null; // TODO: replace null with proper value
            string expand = null; // TODO: replace null with proper value
            var response = instance.GetWorkspaces(pageSize, pageNumber, access, expand);
            Assert.IsInstanceOf<WorkspaceEntityListing> (response, "response is WorkspaceEntityListing");
        }
        
        /// <summary>
        /// Test PostAuditquery
        /// </summary>
        [Test]
        public void PostAuditqueryTest()
        {
            // TODO: add unit test for the method 'PostAuditquery'
            ContentQueryRequest body = null; // TODO: replace null with proper value
            var response = instance.PostAuditquery(body);
            Assert.IsInstanceOf<QueryResults> (response, "response is QueryResults");
        }
        
        /// <summary>
        /// Test PostDocument
        /// </summary>
        [Test]
        public void PostDocumentTest()
        {
            // TODO: add unit test for the method 'PostDocument'
            string documentId = null; // TODO: replace null with proper value
            DocumentUpdate body = null; // TODO: replace null with proper value
            string expand = null; // TODO: replace null with proper value
            bool? _override = null; // TODO: replace null with proper value
            var response = instance.PostDocument(documentId, body, expand, _override);
            Assert.IsInstanceOf<Document> (response, "response is Document");
        }
        
        /// <summary>
        /// Test PostDocumentContent
        /// </summary>
        [Test]
        public void PostDocumentContentTest()
        {
            // TODO: add unit test for the method 'PostDocumentContent'
            string documentId = null; // TODO: replace null with proper value
            ReplaceRequest body = null; // TODO: replace null with proper value
            bool? _override = null; // TODO: replace null with proper value
            var response = instance.PostDocumentContent(documentId, body, _override);
            Assert.IsInstanceOf<ReplaceResponse> (response, "response is ReplaceResponse");
        }
        
        /// <summary>
        /// Test PostDocuments
        /// </summary>
        [Test]
        public void PostDocumentsTest()
        {
            // TODO: add unit test for the method 'PostDocuments'
            DocumentUpload body = null; // TODO: replace null with proper value
            string copySource = null; // TODO: replace null with proper value
            string moveSource = null; // TODO: replace null with proper value
            bool? _override = null; // TODO: replace null with proper value
            var response = instance.PostDocuments(body, copySource, moveSource, _override);
            Assert.IsInstanceOf<Document> (response, "response is Document");
        }
        
        /// <summary>
        /// Test PostQuery
        /// </summary>
        [Test]
        public void PostQueryTest()
        {
            // TODO: add unit test for the method 'PostQuery'
            QueryRequest body = null; // TODO: replace null with proper value
            string expand = null; // TODO: replace null with proper value
            var response = instance.PostQuery(body, expand);
            Assert.IsInstanceOf<QueryResults> (response, "response is QueryResults");
        }
        
        /// <summary>
        /// Test PostShares
        /// </summary>
        [Test]
        public void PostSharesTest()
        {
            // TODO: add unit test for the method 'PostShares'
            CreateShareRequest body = null; // TODO: replace null with proper value
            var response = instance.PostShares(body);
            Assert.IsInstanceOf<CreateShareResponse> (response, "response is CreateShareResponse");
        }
        
        /// <summary>
        /// Test PostWorkspaceTagvalues
        /// </summary>
        [Test]
        public void PostWorkspaceTagvaluesTest()
        {
            // TODO: add unit test for the method 'PostWorkspaceTagvalues'
            string workspaceId = null; // TODO: replace null with proper value
            TagValue body = null; // TODO: replace null with proper value
            var response = instance.PostWorkspaceTagvalues(workspaceId, body);
            Assert.IsInstanceOf<TagValue> (response, "response is TagValue");
        }
        
        /// <summary>
        /// Test PostWorkspaceTagvaluesQuery
        /// </summary>
        [Test]
        public void PostWorkspaceTagvaluesQueryTest()
        {
            // TODO: add unit test for the method 'PostWorkspaceTagvaluesQuery'
            string workspaceId = null; // TODO: replace null with proper value
            TagQueryRequest body = null; // TODO: replace null with proper value
            string expand = null; // TODO: replace null with proper value
            var response = instance.PostWorkspaceTagvaluesQuery(workspaceId, body, expand);
            Assert.IsInstanceOf<TagValueEntityListing> (response, "response is TagValueEntityListing");
        }
        
        /// <summary>
        /// Test PostWorkspaces
        /// </summary>
        [Test]
        public void PostWorkspacesTest()
        {
            // TODO: add unit test for the method 'PostWorkspaces'
            WorkspaceCreate body = null; // TODO: replace null with proper value
            var response = instance.PostWorkspaces(body);
            Assert.IsInstanceOf<Workspace> (response, "response is Workspace");
        }
        
        /// <summary>
        /// Test PutWorkspace
        /// </summary>
        [Test]
        public void PutWorkspaceTest()
        {
            // TODO: add unit test for the method 'PutWorkspace'
            string workspaceId = null; // TODO: replace null with proper value
            Workspace body = null; // TODO: replace null with proper value
            var response = instance.PutWorkspace(workspaceId, body);
            Assert.IsInstanceOf<Workspace> (response, "response is Workspace");
        }
        
        /// <summary>
        /// Test PutWorkspaceMember
        /// </summary>
        [Test]
        public void PutWorkspaceMemberTest()
        {
            // TODO: add unit test for the method 'PutWorkspaceMember'
            string workspaceId = null; // TODO: replace null with proper value
            string memberId = null; // TODO: replace null with proper value
            WorkspaceMember body = null; // TODO: replace null with proper value
            var response = instance.PutWorkspaceMember(workspaceId, memberId, body);
            Assert.IsInstanceOf<WorkspaceMember> (response, "response is WorkspaceMember");
        }
        
        /// <summary>
        /// Test PutWorkspaceTagvalue
        /// </summary>
        [Test]
        public void PutWorkspaceTagvalueTest()
        {
            // TODO: add unit test for the method 'PutWorkspaceTagvalue'
            string workspaceId = null; // TODO: replace null with proper value
            string tagId = null; // TODO: replace null with proper value
            TagValue body = null; // TODO: replace null with proper value
            var response = instance.PutWorkspaceTagvalue(workspaceId, tagId, body);
            Assert.IsInstanceOf<TagValue> (response, "response is TagValue");
        }
        
    }

}
