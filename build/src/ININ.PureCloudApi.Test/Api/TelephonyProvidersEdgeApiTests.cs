using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using NUnit.Framework;

using ININ.PureCloudApi.Client;
using ININ.PureCloudApi.Api;
using ININ.PureCloudApi.Model;

namespace ININ.PureCloudApi.Test
{
    /// <summary>
    ///  Class for testing TelephonyProvidersEdgeApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by Swagger Codegen.
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    [TestFixture]
    public class TelephonyProvidersEdgeApiTests
    {
        private TelephonyProvidersEdgeApi instance;

        /// <summary>
        /// Setup before each unit test
        /// </summary>
        [SetUp]
        public void Init()
        {
            instance = new TelephonyProvidersEdgeApi();
        }

        /// <summary>
        /// Clean up after each unit test
        /// </summary>
        [TearDown]
        public void Cleanup()
        {

        }

        /// <summary>
        /// Test an instance of TelephonyProvidersEdgeApi
        /// </summary>
        [Test]
        public void InstanceTest()
        {
            Assert.IsInstanceOf<TelephonyProvidersEdgeApi> (instance, "instance is a TelephonyProvidersEdgeApi");
        }

        
        /// <summary>
        /// Test DeleteProvidersEdge
        /// </summary>
        [Test]
        public void DeleteProvidersEdgeTest()
        {
            // TODO: add unit test for the method 'DeleteProvidersEdge'
            string edgeId = null; // TODO: replace null with proper value
            var response = instance.DeleteProvidersEdge(edgeId);
            Assert.IsInstanceOf<string> (response, "response is string");
        }
        
        /// <summary>
        /// Test DeleteProvidersEdgeLogicalinterface
        /// </summary>
        [Test]
        public void DeleteProvidersEdgeLogicalinterfaceTest()
        {
            // TODO: add unit test for the method 'DeleteProvidersEdgeLogicalinterface'
            string edgeId = null; // TODO: replace null with proper value
            string interfaceId = null; // TODO: replace null with proper value
            instance.DeleteProvidersEdgeLogicalinterface(edgeId, interfaceId);
            
        }
        
        /// <summary>
        /// Test DeleteProvidersEdgeSoftwareupdate
        /// </summary>
        [Test]
        public void DeleteProvidersEdgeSoftwareupdateTest()
        {
            // TODO: add unit test for the method 'DeleteProvidersEdgeSoftwareupdate'
            string edgeId = null; // TODO: replace null with proper value
            var response = instance.DeleteProvidersEdgeSoftwareupdate(edgeId);
            Assert.IsInstanceOf<string> (response, "response is string");
        }
        
        /// <summary>
        /// Test DeleteProvidersEdgesCertificateauthority
        /// </summary>
        [Test]
        public void DeleteProvidersEdgesCertificateauthorityTest()
        {
            // TODO: add unit test for the method 'DeleteProvidersEdgesCertificateauthority'
            string certificateId = null; // TODO: replace null with proper value
            var response = instance.DeleteProvidersEdgesCertificateauthority(certificateId);
            Assert.IsInstanceOf<string> (response, "response is string");
        }
        
        /// <summary>
        /// Test DeleteProvidersEdgesDidpool
        /// </summary>
        [Test]
        public void DeleteProvidersEdgesDidpoolTest()
        {
            // TODO: add unit test for the method 'DeleteProvidersEdgesDidpool'
            string didPoolId = null; // TODO: replace null with proper value
            var response = instance.DeleteProvidersEdgesDidpool(didPoolId);
            Assert.IsInstanceOf<string> (response, "response is string");
        }
        
        /// <summary>
        /// Test DeleteProvidersEdgesEdgegroup
        /// </summary>
        [Test]
        public void DeleteProvidersEdgesEdgegroupTest()
        {
            // TODO: add unit test for the method 'DeleteProvidersEdgesEdgegroup'
            string edgeGroupId = null; // TODO: replace null with proper value
            var response = instance.DeleteProvidersEdgesEdgegroup(edgeGroupId);
            Assert.IsInstanceOf<string> (response, "response is string");
        }
        
        /// <summary>
        /// Test DeleteProvidersEdgesEndpoint
        /// </summary>
        [Test]
        public void DeleteProvidersEdgesEndpointTest()
        {
            // TODO: add unit test for the method 'DeleteProvidersEdgesEndpoint'
            string endpointId = null; // TODO: replace null with proper value
            var response = instance.DeleteProvidersEdgesEndpoint(endpointId);
            Assert.IsInstanceOf<string> (response, "response is string");
        }
        
        /// <summary>
        /// Test DeleteProvidersEdgesExtensionpool
        /// </summary>
        [Test]
        public void DeleteProvidersEdgesExtensionpoolTest()
        {
            // TODO: add unit test for the method 'DeleteProvidersEdgesExtensionpool'
            string extensionPoolId = null; // TODO: replace null with proper value
            var response = instance.DeleteProvidersEdgesExtensionpool(extensionPoolId);
            Assert.IsInstanceOf<string> (response, "response is string");
        }
        
        /// <summary>
        /// Test DeleteProvidersEdgesOutboundroute
        /// </summary>
        [Test]
        public void DeleteProvidersEdgesOutboundrouteTest()
        {
            // TODO: add unit test for the method 'DeleteProvidersEdgesOutboundroute'
            string outboundRouteId = null; // TODO: replace null with proper value
            var response = instance.DeleteProvidersEdgesOutboundroute(outboundRouteId);
            Assert.IsInstanceOf<string> (response, "response is string");
        }
        
        /// <summary>
        /// Test DeleteProvidersEdgesPhone
        /// </summary>
        [Test]
        public void DeleteProvidersEdgesPhoneTest()
        {
            // TODO: add unit test for the method 'DeleteProvidersEdgesPhone'
            string phoneId = null; // TODO: replace null with proper value
            var response = instance.DeleteProvidersEdgesPhone(phoneId);
            Assert.IsInstanceOf<string> (response, "response is string");
        }
        
        /// <summary>
        /// Test DeleteProvidersEdgesPhonebasesetting
        /// </summary>
        [Test]
        public void DeleteProvidersEdgesPhonebasesettingTest()
        {
            // TODO: add unit test for the method 'DeleteProvidersEdgesPhonebasesetting'
            string phoneBaseId = null; // TODO: replace null with proper value
            var response = instance.DeleteProvidersEdgesPhonebasesetting(phoneBaseId);
            Assert.IsInstanceOf<string> (response, "response is string");
        }
        
        /// <summary>
        /// Test DeleteProvidersEdgesSite
        /// </summary>
        [Test]
        public void DeleteProvidersEdgesSiteTest()
        {
            // TODO: add unit test for the method 'DeleteProvidersEdgesSite'
            string siteId = null; // TODO: replace null with proper value
            var response = instance.DeleteProvidersEdgesSite(siteId);
            Assert.IsInstanceOf<string> (response, "response is string");
        }
        
        /// <summary>
        /// Test DeleteProvidersEdgesTrunkbasesetting
        /// </summary>
        [Test]
        public void DeleteProvidersEdgesTrunkbasesettingTest()
        {
            // TODO: add unit test for the method 'DeleteProvidersEdgesTrunkbasesetting'
            string trunkBaseSettingsId = null; // TODO: replace null with proper value
            var response = instance.DeleteProvidersEdgesTrunkbasesetting(trunkBaseSettingsId);
            Assert.IsInstanceOf<string> (response, "response is string");
        }
        
        /// <summary>
        /// Test GetProvidersEdge
        /// </summary>
        [Test]
        public void GetProvidersEdgeTest()
        {
            // TODO: add unit test for the method 'GetProvidersEdge'
            string edgeId = null; // TODO: replace null with proper value
            var response = instance.GetProvidersEdge(edgeId);
            Assert.IsInstanceOf<Edge> (response, "response is Edge");
        }
        
        /// <summary>
        /// Test GetProvidersEdgeLine
        /// </summary>
        [Test]
        public void GetProvidersEdgeLineTest()
        {
            // TODO: add unit test for the method 'GetProvidersEdgeLine'
            string edgeId = null; // TODO: replace null with proper value
            string lineId = null; // TODO: replace null with proper value
            var response = instance.GetProvidersEdgeLine(edgeId, lineId);
            Assert.IsInstanceOf<EdgeLine> (response, "response is EdgeLine");
        }
        
        /// <summary>
        /// Test GetProvidersEdgeLines
        /// </summary>
        [Test]
        public void GetProvidersEdgeLinesTest()
        {
            // TODO: add unit test for the method 'GetProvidersEdgeLines'
            string edgeId = null; // TODO: replace null with proper value
            int? pageSize = null; // TODO: replace null with proper value
            int? pageNumber = null; // TODO: replace null with proper value
            var response = instance.GetProvidersEdgeLines(edgeId, pageSize, pageNumber);
            Assert.IsInstanceOf<EdgeLineEntityListing> (response, "response is EdgeLineEntityListing");
        }
        
        /// <summary>
        /// Test GetProvidersEdgeLogicalinterface
        /// </summary>
        [Test]
        public void GetProvidersEdgeLogicalinterfaceTest()
        {
            // TODO: add unit test for the method 'GetProvidersEdgeLogicalinterface'
            string edgeId = null; // TODO: replace null with proper value
            string interfaceId = null; // TODO: replace null with proper value
            List<string> expand = null; // TODO: replace null with proper value
            var response = instance.GetProvidersEdgeLogicalinterface(edgeId, interfaceId, expand);
            Assert.IsInstanceOf<DomainLogicalInterface> (response, "response is DomainLogicalInterface");
        }
        
        /// <summary>
        /// Test GetProvidersEdgeLogicalinterfaces
        /// </summary>
        [Test]
        public void GetProvidersEdgeLogicalinterfacesTest()
        {
            // TODO: add unit test for the method 'GetProvidersEdgeLogicalinterfaces'
            string edgeId = null; // TODO: replace null with proper value
            List<string> expand = null; // TODO: replace null with proper value
            var response = instance.GetProvidersEdgeLogicalinterfaces(edgeId, expand);
            Assert.IsInstanceOf<LogicalInterfaceEntityListing> (response, "response is LogicalInterfaceEntityListing");
        }
        
        /// <summary>
        /// Test GetProvidersEdgeLogsJob
        /// </summary>
        [Test]
        public void GetProvidersEdgeLogsJobTest()
        {
            // TODO: add unit test for the method 'GetProvidersEdgeLogsJob'
            string edgeId = null; // TODO: replace null with proper value
            string jobId = null; // TODO: replace null with proper value
            var response = instance.GetProvidersEdgeLogsJob(edgeId, jobId);
            Assert.IsInstanceOf<EdgeLogsJob> (response, "response is EdgeLogsJob");
        }
        
        /// <summary>
        /// Test GetProvidersEdgePhysicalinterface
        /// </summary>
        [Test]
        public void GetProvidersEdgePhysicalinterfaceTest()
        {
            // TODO: add unit test for the method 'GetProvidersEdgePhysicalinterface'
            string edgeId = null; // TODO: replace null with proper value
            string interfaceId = null; // TODO: replace null with proper value
            var response = instance.GetProvidersEdgePhysicalinterface(edgeId, interfaceId);
            Assert.IsInstanceOf<DomainPhysicalInterface> (response, "response is DomainPhysicalInterface");
        }
        
        /// <summary>
        /// Test GetProvidersEdgePhysicalinterfaces
        /// </summary>
        [Test]
        public void GetProvidersEdgePhysicalinterfacesTest()
        {
            // TODO: add unit test for the method 'GetProvidersEdgePhysicalinterfaces'
            string edgeId = null; // TODO: replace null with proper value
            var response = instance.GetProvidersEdgePhysicalinterfaces(edgeId);
            Assert.IsInstanceOf<PhysicalInterfaceEntityListing> (response, "response is PhysicalInterfaceEntityListing");
        }
        
        /// <summary>
        /// Test GetProvidersEdgeSoftwareupdate
        /// </summary>
        [Test]
        public void GetProvidersEdgeSoftwareupdateTest()
        {
            // TODO: add unit test for the method 'GetProvidersEdgeSoftwareupdate'
            string edgeId = null; // TODO: replace null with proper value
            var response = instance.GetProvidersEdgeSoftwareupdate(edgeId);
            Assert.IsInstanceOf<DomainEdgeSoftwareUpdateDto> (response, "response is DomainEdgeSoftwareUpdateDto");
        }
        
        /// <summary>
        /// Test GetProvidersEdgeSoftwareversions
        /// </summary>
        [Test]
        public void GetProvidersEdgeSoftwareversionsTest()
        {
            // TODO: add unit test for the method 'GetProvidersEdgeSoftwareversions'
            string edgeId = null; // TODO: replace null with proper value
            var response = instance.GetProvidersEdgeSoftwareversions(edgeId);
            Assert.IsInstanceOf<DomainEdgeSoftwareVersionDto> (response, "response is DomainEdgeSoftwareVersionDto");
        }
        
        /// <summary>
        /// Test GetProvidersEdges
        /// </summary>
        [Test]
        public void GetProvidersEdgesTest()
        {
            // TODO: add unit test for the method 'GetProvidersEdges'
            int? pageSize = null; // TODO: replace null with proper value
            int? pageNumber = null; // TODO: replace null with proper value
            string name = null; // TODO: replace null with proper value
            string siteId = null; // TODO: replace null with proper value
            string edgeGroupId = null; // TODO: replace null with proper value
            string sortBy = null; // TODO: replace null with proper value
            var response = instance.GetProvidersEdges(pageSize, pageNumber, name, siteId, edgeGroupId, sortBy);
            Assert.IsInstanceOf<EdgeEntityListing> (response, "response is EdgeEntityListing");
        }
        
        /// <summary>
        /// Test GetProvidersEdgesAvailablelanguages
        /// </summary>
        [Test]
        public void GetProvidersEdgesAvailablelanguagesTest()
        {
            // TODO: add unit test for the method 'GetProvidersEdgesAvailablelanguages'
            var response = instance.GetProvidersEdgesAvailablelanguages();
            Assert.IsInstanceOf<AvailableLanguageList> (response, "response is AvailableLanguageList");
        }
        
        /// <summary>
        /// Test GetProvidersEdgesCertificateauthorities
        /// </summary>
        [Test]
        public void GetProvidersEdgesCertificateauthoritiesTest()
        {
            // TODO: add unit test for the method 'GetProvidersEdgesCertificateauthorities'
            var response = instance.GetProvidersEdgesCertificateauthorities();
            Assert.IsInstanceOf<CertificateAuthorityEntityListing> (response, "response is CertificateAuthorityEntityListing");
        }
        
        /// <summary>
        /// Test GetProvidersEdgesCertificateauthority
        /// </summary>
        [Test]
        public void GetProvidersEdgesCertificateauthorityTest()
        {
            // TODO: add unit test for the method 'GetProvidersEdgesCertificateauthority'
            string certificateId = null; // TODO: replace null with proper value
            var response = instance.GetProvidersEdgesCertificateauthority(certificateId);
            Assert.IsInstanceOf<DomainCertificateAuthority> (response, "response is DomainCertificateAuthority");
        }
        
        /// <summary>
        /// Test GetProvidersEdgesDid
        /// </summary>
        [Test]
        public void GetProvidersEdgesDidTest()
        {
            // TODO: add unit test for the method 'GetProvidersEdgesDid'
            string didId = null; // TODO: replace null with proper value
            var response = instance.GetProvidersEdgesDid(didId);
            Assert.IsInstanceOf<DID> (response, "response is DID");
        }
        
        /// <summary>
        /// Test GetProvidersEdgesDidpool
        /// </summary>
        [Test]
        public void GetProvidersEdgesDidpoolTest()
        {
            // TODO: add unit test for the method 'GetProvidersEdgesDidpool'
            string didPoolId = null; // TODO: replace null with proper value
            var response = instance.GetProvidersEdgesDidpool(didPoolId);
            Assert.IsInstanceOf<DIDPool> (response, "response is DIDPool");
        }
        
        /// <summary>
        /// Test GetProvidersEdgesDidpools
        /// </summary>
        [Test]
        public void GetProvidersEdgesDidpoolsTest()
        {
            // TODO: add unit test for the method 'GetProvidersEdgesDidpools'
            int? pageSize = null; // TODO: replace null with proper value
            int? pageNumber = null; // TODO: replace null with proper value
            string sortBy = null; // TODO: replace null with proper value
            var response = instance.GetProvidersEdgesDidpools(pageSize, pageNumber, sortBy);
            Assert.IsInstanceOf<DIDPoolEntityListing> (response, "response is DIDPoolEntityListing");
        }
        
        /// <summary>
        /// Test GetProvidersEdgesDids
        /// </summary>
        [Test]
        public void GetProvidersEdgesDidsTest()
        {
            // TODO: add unit test for the method 'GetProvidersEdgesDids'
            int? pageSize = null; // TODO: replace null with proper value
            int? pageNumber = null; // TODO: replace null with proper value
            string sortBy = null; // TODO: replace null with proper value
            string sortOrder = null; // TODO: replace null with proper value
            string phoneNumber = null; // TODO: replace null with proper value
            var response = instance.GetProvidersEdgesDids(pageSize, pageNumber, sortBy, sortOrder, phoneNumber);
            Assert.IsInstanceOf<DIDEntityListing> (response, "response is DIDEntityListing");
        }
        
        /// <summary>
        /// Test GetProvidersEdgesEdgegroup
        /// </summary>
        [Test]
        public void GetProvidersEdgesEdgegroupTest()
        {
            // TODO: add unit test for the method 'GetProvidersEdgesEdgegroup'
            string edgeGroupId = null; // TODO: replace null with proper value
            List<string> expand = null; // TODO: replace null with proper value
            var response = instance.GetProvidersEdgesEdgegroup(edgeGroupId, expand);
            Assert.IsInstanceOf<EdgeGroup> (response, "response is EdgeGroup");
        }
        
        /// <summary>
        /// Test GetProvidersEdgesEdgegroups
        /// </summary>
        [Test]
        public void GetProvidersEdgesEdgegroupsTest()
        {
            // TODO: add unit test for the method 'GetProvidersEdgesEdgegroups'
            int? pageSize = null; // TODO: replace null with proper value
            int? pageNumber = null; // TODO: replace null with proper value
            string name = null; // TODO: replace null with proper value
            string sortBy = null; // TODO: replace null with proper value
            var response = instance.GetProvidersEdgesEdgegroups(pageSize, pageNumber, name, sortBy);
            Assert.IsInstanceOf<EdgeGroupEntityListing> (response, "response is EdgeGroupEntityListing");
        }
        
        /// <summary>
        /// Test GetProvidersEdgesEdgeversionreport
        /// </summary>
        [Test]
        public void GetProvidersEdgesEdgeversionreportTest()
        {
            // TODO: add unit test for the method 'GetProvidersEdgesEdgeversionreport'
            var response = instance.GetProvidersEdgesEdgeversionreport();
            Assert.IsInstanceOf<EdgeVersionReport> (response, "response is EdgeVersionReport");
        }
        
        /// <summary>
        /// Test GetProvidersEdgesEndpoint
        /// </summary>
        [Test]
        public void GetProvidersEdgesEndpointTest()
        {
            // TODO: add unit test for the method 'GetProvidersEdgesEndpoint'
            string endpointId = null; // TODO: replace null with proper value
            var response = instance.GetProvidersEdgesEndpoint(endpointId);
            Assert.IsInstanceOf<Endpoint> (response, "response is Endpoint");
        }
        
        /// <summary>
        /// Test GetProvidersEdgesEndpoints
        /// </summary>
        [Test]
        public void GetProvidersEdgesEndpointsTest()
        {
            // TODO: add unit test for the method 'GetProvidersEdgesEndpoints'
            int? pageSize = null; // TODO: replace null with proper value
            int? pageNumber = null; // TODO: replace null with proper value
            string name = null; // TODO: replace null with proper value
            string sortBy = null; // TODO: replace null with proper value
            var response = instance.GetProvidersEdgesEndpoints(pageSize, pageNumber, name, sortBy);
            Assert.IsInstanceOf<EndpointEntityListing> (response, "response is EndpointEntityListing");
        }
        
        /// <summary>
        /// Test GetProvidersEdgesExtension
        /// </summary>
        [Test]
        public void GetProvidersEdgesExtensionTest()
        {
            // TODO: add unit test for the method 'GetProvidersEdgesExtension'
            string extensionId = null; // TODO: replace null with proper value
            var response = instance.GetProvidersEdgesExtension(extensionId);
            Assert.IsInstanceOf<Extension> (response, "response is Extension");
        }
        
        /// <summary>
        /// Test GetProvidersEdgesExtensionpool
        /// </summary>
        [Test]
        public void GetProvidersEdgesExtensionpoolTest()
        {
            // TODO: add unit test for the method 'GetProvidersEdgesExtensionpool'
            string extensionPoolId = null; // TODO: replace null with proper value
            var response = instance.GetProvidersEdgesExtensionpool(extensionPoolId);
            Assert.IsInstanceOf<ExtensionPool> (response, "response is ExtensionPool");
        }
        
        /// <summary>
        /// Test GetProvidersEdgesExtensionpools
        /// </summary>
        [Test]
        public void GetProvidersEdgesExtensionpoolsTest()
        {
            // TODO: add unit test for the method 'GetProvidersEdgesExtensionpools'
            int? pageSize = null; // TODO: replace null with proper value
            int? pageNumber = null; // TODO: replace null with proper value
            string sortBy = null; // TODO: replace null with proper value
            string number = null; // TODO: replace null with proper value
            var response = instance.GetProvidersEdgesExtensionpools(pageSize, pageNumber, sortBy, number);
            Assert.IsInstanceOf<ExtensionPoolEntityListing> (response, "response is ExtensionPoolEntityListing");
        }
        
        /// <summary>
        /// Test GetProvidersEdgesExtensions
        /// </summary>
        [Test]
        public void GetProvidersEdgesExtensionsTest()
        {
            // TODO: add unit test for the method 'GetProvidersEdgesExtensions'
            int? pageSize = null; // TODO: replace null with proper value
            int? pageNumber = null; // TODO: replace null with proper value
            string sortBy = null; // TODO: replace null with proper value
            string sortOrder = null; // TODO: replace null with proper value
            string number = null; // TODO: replace null with proper value
            var response = instance.GetProvidersEdgesExtensions(pageSize, pageNumber, sortBy, sortOrder, number);
            Assert.IsInstanceOf<ExtensionEntityListing> (response, "response is ExtensionEntityListing");
        }
        
        /// <summary>
        /// Test GetProvidersEdgesLine
        /// </summary>
        [Test]
        public void GetProvidersEdgesLineTest()
        {
            // TODO: add unit test for the method 'GetProvidersEdgesLine'
            string lineId = null; // TODO: replace null with proper value
            var response = instance.GetProvidersEdgesLine(lineId);
            Assert.IsInstanceOf<Line> (response, "response is Line");
        }
        
        /// <summary>
        /// Test GetProvidersEdgesLinebasesetting
        /// </summary>
        [Test]
        public void GetProvidersEdgesLinebasesettingTest()
        {
            // TODO: add unit test for the method 'GetProvidersEdgesLinebasesetting'
            string lineBaseId = null; // TODO: replace null with proper value
            var response = instance.GetProvidersEdgesLinebasesetting(lineBaseId);
            Assert.IsInstanceOf<LineBase> (response, "response is LineBase");
        }
        
        /// <summary>
        /// Test GetProvidersEdgesLinebasesettings
        /// </summary>
        [Test]
        public void GetProvidersEdgesLinebasesettingsTest()
        {
            // TODO: add unit test for the method 'GetProvidersEdgesLinebasesettings'
            int? pageNumber = null; // TODO: replace null with proper value
            int? pageSize = null; // TODO: replace null with proper value
            string sortBy = null; // TODO: replace null with proper value
            string sortOrder = null; // TODO: replace null with proper value
            var response = instance.GetProvidersEdgesLinebasesettings(pageNumber, pageSize, sortBy, sortOrder);
            Assert.IsInstanceOf<LineBaseEntityListing> (response, "response is LineBaseEntityListing");
        }
        
        /// <summary>
        /// Test GetProvidersEdgesLines
        /// </summary>
        [Test]
        public void GetProvidersEdgesLinesTest()
        {
            // TODO: add unit test for the method 'GetProvidersEdgesLines'
            int? pageSize = null; // TODO: replace null with proper value
            int? pageNumber = null; // TODO: replace null with proper value
            string name = null; // TODO: replace null with proper value
            string sortBy = null; // TODO: replace null with proper value
            List<string> expand = null; // TODO: replace null with proper value
            var response = instance.GetProvidersEdgesLines(pageSize, pageNumber, name, sortBy, expand);
            Assert.IsInstanceOf<LineEntityListing> (response, "response is LineEntityListing");
        }
        
        /// <summary>
        /// Test GetProvidersEdgesLinesTemplate
        /// </summary>
        [Test]
        public void GetProvidersEdgesLinesTemplateTest()
        {
            // TODO: add unit test for the method 'GetProvidersEdgesLinesTemplate'
            string lineBaseSettingsId = null; // TODO: replace null with proper value
            var response = instance.GetProvidersEdgesLinesTemplate(lineBaseSettingsId);
            Assert.IsInstanceOf<Line> (response, "response is Line");
        }
        
        /// <summary>
        /// Test GetProvidersEdgesOutboundroute
        /// </summary>
        [Test]
        public void GetProvidersEdgesOutboundrouteTest()
        {
            // TODO: add unit test for the method 'GetProvidersEdgesOutboundroute'
            string outboundRouteId = null; // TODO: replace null with proper value
            var response = instance.GetProvidersEdgesOutboundroute(outboundRouteId);
            Assert.IsInstanceOf<OutboundRoute> (response, "response is OutboundRoute");
        }
        
        /// <summary>
        /// Test GetProvidersEdgesOutboundroutes
        /// </summary>
        [Test]
        public void GetProvidersEdgesOutboundroutesTest()
        {
            // TODO: add unit test for the method 'GetProvidersEdgesOutboundroutes'
            int? pageSize = null; // TODO: replace null with proper value
            int? pageNumber = null; // TODO: replace null with proper value
            string name = null; // TODO: replace null with proper value
            string siteId = null; // TODO: replace null with proper value
            string sortBy = null; // TODO: replace null with proper value
            var response = instance.GetProvidersEdgesOutboundroutes(pageSize, pageNumber, name, siteId, sortBy);
            Assert.IsInstanceOf<OutboundRouteEntityListing> (response, "response is OutboundRouteEntityListing");
        }
        
        /// <summary>
        /// Test GetProvidersEdgesPhone
        /// </summary>
        [Test]
        public void GetProvidersEdgesPhoneTest()
        {
            // TODO: add unit test for the method 'GetProvidersEdgesPhone'
            string phoneId = null; // TODO: replace null with proper value
            var response = instance.GetProvidersEdgesPhone(phoneId);
            Assert.IsInstanceOf<Phone> (response, "response is Phone");
        }
        
        /// <summary>
        /// Test GetProvidersEdgesPhonebasesetting
        /// </summary>
        [Test]
        public void GetProvidersEdgesPhonebasesettingTest()
        {
            // TODO: add unit test for the method 'GetProvidersEdgesPhonebasesetting'
            string phoneBaseId = null; // TODO: replace null with proper value
            var response = instance.GetProvidersEdgesPhonebasesetting(phoneBaseId);
            Assert.IsInstanceOf<PhoneBase> (response, "response is PhoneBase");
        }
        
        /// <summary>
        /// Test GetProvidersEdgesPhonebasesettings
        /// </summary>
        [Test]
        public void GetProvidersEdgesPhonebasesettingsTest()
        {
            // TODO: add unit test for the method 'GetProvidersEdgesPhonebasesettings'
            int? pageNumber = null; // TODO: replace null with proper value
            int? pageSize = null; // TODO: replace null with proper value
            string sortBy = null; // TODO: replace null with proper value
            string sortOrder = null; // TODO: replace null with proper value
            var response = instance.GetProvidersEdgesPhonebasesettings(pageNumber, pageSize, sortBy, sortOrder);
            Assert.IsInstanceOf<PhoneBaseEntityListing> (response, "response is PhoneBaseEntityListing");
        }
        
        /// <summary>
        /// Test GetProvidersEdgesPhonebasesettingsAvailablemetabases
        /// </summary>
        [Test]
        public void GetProvidersEdgesPhonebasesettingsAvailablemetabasesTest()
        {
            // TODO: add unit test for the method 'GetProvidersEdgesPhonebasesettingsAvailablemetabases'
            int? pageSize = null; // TODO: replace null with proper value
            int? pageNumber = null; // TODO: replace null with proper value
            var response = instance.GetProvidersEdgesPhonebasesettingsAvailablemetabases(pageSize, pageNumber);
            Assert.IsInstanceOf<PhoneMetaBaseEntityListing> (response, "response is PhoneMetaBaseEntityListing");
        }
        
        /// <summary>
        /// Test GetProvidersEdgesPhonebasesettingsTemplate
        /// </summary>
        [Test]
        public void GetProvidersEdgesPhonebasesettingsTemplateTest()
        {
            // TODO: add unit test for the method 'GetProvidersEdgesPhonebasesettingsTemplate'
            string phoneMetabaseId = null; // TODO: replace null with proper value
            var response = instance.GetProvidersEdgesPhonebasesettingsTemplate(phoneMetabaseId);
            Assert.IsInstanceOf<PhoneBase> (response, "response is PhoneBase");
        }
        
        /// <summary>
        /// Test GetProvidersEdgesPhones
        /// </summary>
        [Test]
        public void GetProvidersEdgesPhonesTest()
        {
            // TODO: add unit test for the method 'GetProvidersEdgesPhones'
            int? pageNumber = null; // TODO: replace null with proper value
            int? pageSize = null; // TODO: replace null with proper value
            string sortBy = null; // TODO: replace null with proper value
            string sortOrder = null; // TODO: replace null with proper value
            string siteId = null; // TODO: replace null with proper value
            string webRtcUserId = null; // TODO: replace null with proper value
            string phoneBaseSettingsId = null; // TODO: replace null with proper value
            string linesLoggedInUserId = null; // TODO: replace null with proper value
            string linesDefaultForUserId = null; // TODO: replace null with proper value
            string phoneHardwareId = null; // TODO: replace null with proper value
            string linesId = null; // TODO: replace null with proper value
            string linesName = null; // TODO: replace null with proper value
            List<string> expand = null; // TODO: replace null with proper value
            List<string> fields = null; // TODO: replace null with proper value
            var response = instance.GetProvidersEdgesPhones(pageNumber, pageSize, sortBy, sortOrder, siteId, webRtcUserId, phoneBaseSettingsId, linesLoggedInUserId, linesDefaultForUserId, phoneHardwareId, linesId, linesName, expand, fields);
            Assert.IsInstanceOf<PhoneEntityListing> (response, "response is PhoneEntityListing");
        }
        
        /// <summary>
        /// Test GetProvidersEdgesPhonesTemplate
        /// </summary>
        [Test]
        public void GetProvidersEdgesPhonesTemplateTest()
        {
            // TODO: add unit test for the method 'GetProvidersEdgesPhonesTemplate'
            string phoneBaseSettingsId = null; // TODO: replace null with proper value
            var response = instance.GetProvidersEdgesPhonesTemplate(phoneBaseSettingsId);
            Assert.IsInstanceOf<Phone> (response, "response is Phone");
        }
        
        /// <summary>
        /// Test GetProvidersEdgesSite
        /// </summary>
        [Test]
        public void GetProvidersEdgesSiteTest()
        {
            // TODO: add unit test for the method 'GetProvidersEdgesSite'
            string siteId = null; // TODO: replace null with proper value
            var response = instance.GetProvidersEdgesSite(siteId);
            Assert.IsInstanceOf<Site> (response, "response is Site");
        }
        
        /// <summary>
        /// Test GetProvidersEdgesSiteNumberplan
        /// </summary>
        [Test]
        public void GetProvidersEdgesSiteNumberplanTest()
        {
            // TODO: add unit test for the method 'GetProvidersEdgesSiteNumberplan'
            string siteId = null; // TODO: replace null with proper value
            string numberPlanId = null; // TODO: replace null with proper value
            var response = instance.GetProvidersEdgesSiteNumberplan(siteId, numberPlanId);
            Assert.IsInstanceOf<NumberPlan> (response, "response is NumberPlan");
        }
        
        /// <summary>
        /// Test GetProvidersEdgesSiteNumberplans
        /// </summary>
        [Test]
        public void GetProvidersEdgesSiteNumberplansTest()
        {
            // TODO: add unit test for the method 'GetProvidersEdgesSiteNumberplans'
            string siteId = null; // TODO: replace null with proper value
            var response = instance.GetProvidersEdgesSiteNumberplans(siteId);
            Assert.IsInstanceOf<List<NumberPlan>> (response, "response is List<NumberPlan>");
        }
        
        /// <summary>
        /// Test GetProvidersEdgesSiteNumberplansClassifications
        /// </summary>
        [Test]
        public void GetProvidersEdgesSiteNumberplansClassificationsTest()
        {
            // TODO: add unit test for the method 'GetProvidersEdgesSiteNumberplansClassifications'
            string siteId = null; // TODO: replace null with proper value
            string classification = null; // TODO: replace null with proper value
            var response = instance.GetProvidersEdgesSiteNumberplansClassifications(siteId, classification);
            Assert.IsInstanceOf<List<string>> (response, "response is List<string>");
        }
        
        /// <summary>
        /// Test GetProvidersEdgesSites
        /// </summary>
        [Test]
        public void GetProvidersEdgesSitesTest()
        {
            // TODO: add unit test for the method 'GetProvidersEdgesSites'
            int? pageSize = null; // TODO: replace null with proper value
            int? pageNumber = null; // TODO: replace null with proper value
            string sortBy = null; // TODO: replace null with proper value
            string sortOrder = null; // TODO: replace null with proper value
            string name = null; // TODO: replace null with proper value
            string locationId = null; // TODO: replace null with proper value
            var response = instance.GetProvidersEdgesSites(pageSize, pageNumber, sortBy, sortOrder, name, locationId);
            Assert.IsInstanceOf<SiteEntityListing> (response, "response is SiteEntityListing");
        }
        
        /// <summary>
        /// Test GetProvidersEdgesTimezones
        /// </summary>
        [Test]
        public void GetProvidersEdgesTimezonesTest()
        {
            // TODO: add unit test for the method 'GetProvidersEdgesTimezones'
            int? pageSize = null; // TODO: replace null with proper value
            int? pageNumber = null; // TODO: replace null with proper value
            var response = instance.GetProvidersEdgesTimezones(pageSize, pageNumber);
            Assert.IsInstanceOf<TimeZoneEntityListing> (response, "response is TimeZoneEntityListing");
        }
        
        /// <summary>
        /// Test GetProvidersEdgesTrunk
        /// </summary>
        [Test]
        public void GetProvidersEdgesTrunkTest()
        {
            // TODO: add unit test for the method 'GetProvidersEdgesTrunk'
            string trunkId = null; // TODO: replace null with proper value
            var response = instance.GetProvidersEdgesTrunk(trunkId);
            Assert.IsInstanceOf<Trunk> (response, "response is Trunk");
        }
        
        /// <summary>
        /// Test GetProvidersEdgesTrunkbasesetting
        /// </summary>
        [Test]
        public void GetProvidersEdgesTrunkbasesettingTest()
        {
            // TODO: add unit test for the method 'GetProvidersEdgesTrunkbasesetting'
            string trunkBaseSettingsId = null; // TODO: replace null with proper value
            var response = instance.GetProvidersEdgesTrunkbasesetting(trunkBaseSettingsId);
            Assert.IsInstanceOf<TrunkBase> (response, "response is TrunkBase");
        }
        
        /// <summary>
        /// Test GetProvidersEdgesTrunkbasesettings
        /// </summary>
        [Test]
        public void GetProvidersEdgesTrunkbasesettingsTest()
        {
            // TODO: add unit test for the method 'GetProvidersEdgesTrunkbasesettings'
            int? pageNumber = null; // TODO: replace null with proper value
            int? pageSize = null; // TODO: replace null with proper value
            string sortBy = null; // TODO: replace null with proper value
            string sortOrder = null; // TODO: replace null with proper value
            bool? recordingEnabled = null; // TODO: replace null with proper value
            var response = instance.GetProvidersEdgesTrunkbasesettings(pageNumber, pageSize, sortBy, sortOrder, recordingEnabled);
            Assert.IsInstanceOf<TrunkBase> (response, "response is TrunkBase");
        }
        
        /// <summary>
        /// Test GetProvidersEdgesTrunkbasesettingsAvailablemetabases
        /// </summary>
        [Test]
        public void GetProvidersEdgesTrunkbasesettingsAvailablemetabasesTest()
        {
            // TODO: add unit test for the method 'GetProvidersEdgesTrunkbasesettingsAvailablemetabases'
            string type = null; // TODO: replace null with proper value
            int? pageSize = null; // TODO: replace null with proper value
            int? pageNumber = null; // TODO: replace null with proper value
            var response = instance.GetProvidersEdgesTrunkbasesettingsAvailablemetabases(type, pageSize, pageNumber);
            Assert.IsInstanceOf<TrunkMetabaseEntityListing> (response, "response is TrunkMetabaseEntityListing");
        }
        
        /// <summary>
        /// Test GetProvidersEdgesTrunkbasesettingsTemplate
        /// </summary>
        [Test]
        public void GetProvidersEdgesTrunkbasesettingsTemplateTest()
        {
            // TODO: add unit test for the method 'GetProvidersEdgesTrunkbasesettingsTemplate'
            string trunkMetabaseId = null; // TODO: replace null with proper value
            var response = instance.GetProvidersEdgesTrunkbasesettingsTemplate(trunkMetabaseId);
            Assert.IsInstanceOf<TrunkBase> (response, "response is TrunkBase");
        }
        
        /// <summary>
        /// Test GetProvidersEdgesTrunks
        /// </summary>
        [Test]
        public void GetProvidersEdgesTrunksTest()
        {
            // TODO: add unit test for the method 'GetProvidersEdgesTrunks'
            int? pageNumber = null; // TODO: replace null with proper value
            int? pageSize = null; // TODO: replace null with proper value
            string sortBy = null; // TODO: replace null with proper value
            string sortOrder = null; // TODO: replace null with proper value
            string edgeId = null; // TODO: replace null with proper value
            string trunkBaseId = null; // TODO: replace null with proper value
            string trunkType = null; // TODO: replace null with proper value
            var response = instance.GetProvidersEdgesTrunks(pageNumber, pageSize, sortBy, sortOrder, edgeId, trunkBaseId, trunkType);
            Assert.IsInstanceOf<TrunkEntityListing> (response, "response is TrunkEntityListing");
        }
        
        /// <summary>
        /// Test GetProvidersEdgesTrunkswithrecording
        /// </summary>
        [Test]
        public void GetProvidersEdgesTrunkswithrecordingTest()
        {
            // TODO: add unit test for the method 'GetProvidersEdgesTrunkswithrecording'
            string trunkType = null; // TODO: replace null with proper value
            var response = instance.GetProvidersEdgesTrunkswithrecording(trunkType);
            Assert.IsInstanceOf<TrunkRecordingEnabledCount> (response, "response is TrunkRecordingEnabledCount");
        }
        
        /// <summary>
        /// Test GetSchemasEdgesVnext
        /// </summary>
        [Test]
        public void GetSchemasEdgesVnextTest()
        {
            // TODO: add unit test for the method 'GetSchemasEdgesVnext'
            int? pageSize = null; // TODO: replace null with proper value
            int? pageNumber = null; // TODO: replace null with proper value
            var response = instance.GetSchemasEdgesVnext(pageSize, pageNumber);
            Assert.IsInstanceOf<SchemaCategoryEntityListing> (response, "response is SchemaCategoryEntityListing");
        }
        
        /// <summary>
        /// Test GetSchemasEdgesVnextSchemaCategory
        /// </summary>
        [Test]
        public void GetSchemasEdgesVnextSchemaCategoryTest()
        {
            // TODO: add unit test for the method 'GetSchemasEdgesVnextSchemaCategory'
            string schemaCategory = null; // TODO: replace null with proper value
            int? pageSize = null; // TODO: replace null with proper value
            int? pageNumber = null; // TODO: replace null with proper value
            var response = instance.GetSchemasEdgesVnextSchemaCategory(schemaCategory, pageSize, pageNumber);
            Assert.IsInstanceOf<SchemaReferenceEntityListing> (response, "response is SchemaReferenceEntityListing");
        }
        
        /// <summary>
        /// Test GetSchemasEdgesVnextSchemaCategorySchemaType
        /// </summary>
        [Test]
        public void GetSchemasEdgesVnextSchemaCategorySchemaTypeTest()
        {
            // TODO: add unit test for the method 'GetSchemasEdgesVnextSchemaCategorySchemaType'
            string schemaCategory = null; // TODO: replace null with proper value
            string schemaType = null; // TODO: replace null with proper value
            int? pageSize = null; // TODO: replace null with proper value
            int? pageNumber = null; // TODO: replace null with proper value
            var response = instance.GetSchemasEdgesVnextSchemaCategorySchemaType(schemaCategory, schemaType, pageSize, pageNumber);
            Assert.IsInstanceOf<SchemaReferenceEntityListing> (response, "response is SchemaReferenceEntityListing");
        }
        
        /// <summary>
        /// Test GetSchemasEdgesVnextSchemaCategorySchemaTypeSchemaId
        /// </summary>
        [Test]
        public void GetSchemasEdgesVnextSchemaCategorySchemaTypeSchemaIdTest()
        {
            // TODO: add unit test for the method 'GetSchemasEdgesVnextSchemaCategorySchemaTypeSchemaId'
            string schemaCategory = null; // TODO: replace null with proper value
            string schemaType = null; // TODO: replace null with proper value
            string schemaId = null; // TODO: replace null with proper value
            var response = instance.GetSchemasEdgesVnextSchemaCategorySchemaTypeSchemaId(schemaCategory, schemaType, schemaId);
            Assert.IsInstanceOf<Organization> (response, "response is Organization");
        }
        
        /// <summary>
        /// Test GetSchemasEdgesVnextSchemaCategorySchemaTypeSchemaIdExtensionTypeMetadataId
        /// </summary>
        [Test]
        public void GetSchemasEdgesVnextSchemaCategorySchemaTypeSchemaIdExtensionTypeMetadataIdTest()
        {
            // TODO: add unit test for the method 'GetSchemasEdgesVnextSchemaCategorySchemaTypeSchemaIdExtensionTypeMetadataId'
            string schemaCategory = null; // TODO: replace null with proper value
            string schemaType = null; // TODO: replace null with proper value
            string schemaId = null; // TODO: replace null with proper value
            string extensionType = null; // TODO: replace null with proper value
            string metadataId = null; // TODO: replace null with proper value
            string type = null; // TODO: replace null with proper value
            var response = instance.GetSchemasEdgesVnextSchemaCategorySchemaTypeSchemaIdExtensionTypeMetadataId(schemaCategory, schemaType, schemaId, extensionType, metadataId, type);
            Assert.IsInstanceOf<Organization> (response, "response is Organization");
        }
        
        /// <summary>
        /// Test PostProvidersEdgeLogicalinterfaces
        /// </summary>
        [Test]
        public void PostProvidersEdgeLogicalinterfacesTest()
        {
            // TODO: add unit test for the method 'PostProvidersEdgeLogicalinterfaces'
            string edgeId = null; // TODO: replace null with proper value
            DomainLogicalInterface body = null; // TODO: replace null with proper value
            var response = instance.PostProvidersEdgeLogicalinterfaces(edgeId, body);
            Assert.IsInstanceOf<DomainLogicalInterface> (response, "response is DomainLogicalInterface");
        }
        
        /// <summary>
        /// Test PostProvidersEdgeLogsJobUpload
        /// </summary>
        [Test]
        public void PostProvidersEdgeLogsJobUploadTest()
        {
            // TODO: add unit test for the method 'PostProvidersEdgeLogsJobUpload'
            string edgeId = null; // TODO: replace null with proper value
            string jobId = null; // TODO: replace null with proper value
            EdgeLogsJobUploadRequest body = null; // TODO: replace null with proper value
            instance.PostProvidersEdgeLogsJobUpload(edgeId, jobId, body);
            
        }
        
        /// <summary>
        /// Test PostProvidersEdgeLogsJobs
        /// </summary>
        [Test]
        public void PostProvidersEdgeLogsJobsTest()
        {
            // TODO: add unit test for the method 'PostProvidersEdgeLogsJobs'
            string edgeId = null; // TODO: replace null with proper value
            EdgeLogsJobRequest body = null; // TODO: replace null with proper value
            var response = instance.PostProvidersEdgeLogsJobs(edgeId, body);
            Assert.IsInstanceOf<EdgeLogsJobResponse> (response, "response is EdgeLogsJobResponse");
        }
        
        /// <summary>
        /// Test PostProvidersEdgeReboot
        /// </summary>
        [Test]
        public void PostProvidersEdgeRebootTest()
        {
            // TODO: add unit test for the method 'PostProvidersEdgeReboot'
            string edgeId = null; // TODO: replace null with proper value
            var response = instance.PostProvidersEdgeReboot(edgeId);
            Assert.IsInstanceOf<string> (response, "response is string");
        }
        
        /// <summary>
        /// Test PostProvidersEdgeSoftwareupdate
        /// </summary>
        [Test]
        public void PostProvidersEdgeSoftwareupdateTest()
        {
            // TODO: add unit test for the method 'PostProvidersEdgeSoftwareupdate'
            string edgeId = null; // TODO: replace null with proper value
            DomainEdgeSoftwareUpdateDto body = null; // TODO: replace null with proper value
            var response = instance.PostProvidersEdgeSoftwareupdate(edgeId, body);
            Assert.IsInstanceOf<DomainEdgeSoftwareUpdateDto> (response, "response is DomainEdgeSoftwareUpdateDto");
        }
        
        /// <summary>
        /// Test PostProvidersEdgeUnpair
        /// </summary>
        [Test]
        public void PostProvidersEdgeUnpairTest()
        {
            // TODO: add unit test for the method 'PostProvidersEdgeUnpair'
            string edgeId = null; // TODO: replace null with proper value
            var response = instance.PostProvidersEdgeUnpair(edgeId);
            Assert.IsInstanceOf<string> (response, "response is string");
        }
        
        /// <summary>
        /// Test PostProvidersEdges
        /// </summary>
        [Test]
        public void PostProvidersEdgesTest()
        {
            // TODO: add unit test for the method 'PostProvidersEdges'
            Edge body = null; // TODO: replace null with proper value
            var response = instance.PostProvidersEdges(body);
            Assert.IsInstanceOf<Edge> (response, "response is Edge");
        }
        
        /// <summary>
        /// Test PostProvidersEdgesAddressvalidation
        /// </summary>
        [Test]
        public void PostProvidersEdgesAddressvalidationTest()
        {
            // TODO: add unit test for the method 'PostProvidersEdgesAddressvalidation'
            ValidateAddressRequest body = null; // TODO: replace null with proper value
            var response = instance.PostProvidersEdgesAddressvalidation(body);
            Assert.IsInstanceOf<ValidateAddressResponse> (response, "response is ValidateAddressResponse");
        }
        
        /// <summary>
        /// Test PostProvidersEdgesCertificateauthorities
        /// </summary>
        [Test]
        public void PostProvidersEdgesCertificateauthoritiesTest()
        {
            // TODO: add unit test for the method 'PostProvidersEdgesCertificateauthorities'
            DomainCertificateAuthority body = null; // TODO: replace null with proper value
            var response = instance.PostProvidersEdgesCertificateauthorities(body);
            Assert.IsInstanceOf<DomainCertificateAuthority> (response, "response is DomainCertificateAuthority");
        }
        
        /// <summary>
        /// Test PostProvidersEdgesDidpools
        /// </summary>
        [Test]
        public void PostProvidersEdgesDidpoolsTest()
        {
            // TODO: add unit test for the method 'PostProvidersEdgesDidpools'
            DIDPool body = null; // TODO: replace null with proper value
            var response = instance.PostProvidersEdgesDidpools(body);
            Assert.IsInstanceOf<DIDPool> (response, "response is DIDPool");
        }
        
        /// <summary>
        /// Test PostProvidersEdgesEdgegroups
        /// </summary>
        [Test]
        public void PostProvidersEdgesEdgegroupsTest()
        {
            // TODO: add unit test for the method 'PostProvidersEdgesEdgegroups'
            EdgeGroup body = null; // TODO: replace null with proper value
            var response = instance.PostProvidersEdgesEdgegroups(body);
            Assert.IsInstanceOf<EdgeGroup> (response, "response is EdgeGroup");
        }
        
        /// <summary>
        /// Test PostProvidersEdgesEndpoints
        /// </summary>
        [Test]
        public void PostProvidersEdgesEndpointsTest()
        {
            // TODO: add unit test for the method 'PostProvidersEdgesEndpoints'
            Endpoint body = null; // TODO: replace null with proper value
            var response = instance.PostProvidersEdgesEndpoints(body);
            Assert.IsInstanceOf<Endpoint> (response, "response is Endpoint");
        }
        
        /// <summary>
        /// Test PostProvidersEdgesExtensionpools
        /// </summary>
        [Test]
        public void PostProvidersEdgesExtensionpoolsTest()
        {
            // TODO: add unit test for the method 'PostProvidersEdgesExtensionpools'
            ExtensionPool body = null; // TODO: replace null with proper value
            var response = instance.PostProvidersEdgesExtensionpools(body);
            Assert.IsInstanceOf<Extension> (response, "response is Extension");
        }
        
        /// <summary>
        /// Test PostProvidersEdgesOutboundroutes
        /// </summary>
        [Test]
        public void PostProvidersEdgesOutboundroutesTest()
        {
            // TODO: add unit test for the method 'PostProvidersEdgesOutboundroutes'
            OutboundRoute body = null; // TODO: replace null with proper value
            var response = instance.PostProvidersEdgesOutboundroutes(body);
            Assert.IsInstanceOf<OutboundRoute> (response, "response is OutboundRoute");
        }
        
        /// <summary>
        /// Test PostProvidersEdgesPhoneReboot
        /// </summary>
        [Test]
        public void PostProvidersEdgesPhoneRebootTest()
        {
            // TODO: add unit test for the method 'PostProvidersEdgesPhoneReboot'
            string phoneId = null; // TODO: replace null with proper value
            instance.PostProvidersEdgesPhoneReboot(phoneId);
            
        }
        
        /// <summary>
        /// Test PostProvidersEdgesPhonebasesettings
        /// </summary>
        [Test]
        public void PostProvidersEdgesPhonebasesettingsTest()
        {
            // TODO: add unit test for the method 'PostProvidersEdgesPhonebasesettings'
            PhoneBase body = null; // TODO: replace null with proper value
            var response = instance.PostProvidersEdgesPhonebasesettings(body);
            Assert.IsInstanceOf<PhoneBase> (response, "response is PhoneBase");
        }
        
        /// <summary>
        /// Test PostProvidersEdgesPhones
        /// </summary>
        [Test]
        public void PostProvidersEdgesPhonesTest()
        {
            // TODO: add unit test for the method 'PostProvidersEdgesPhones'
            Phone body = null; // TODO: replace null with proper value
            var response = instance.PostProvidersEdgesPhones(body);
            Assert.IsInstanceOf<Phone> (response, "response is Phone");
        }
        
        /// <summary>
        /// Test PostProvidersEdgesPhonesReboot
        /// </summary>
        [Test]
        public void PostProvidersEdgesPhonesRebootTest()
        {
            // TODO: add unit test for the method 'PostProvidersEdgesPhonesReboot'
            PhonesReboot body = null; // TODO: replace null with proper value
            instance.PostProvidersEdgesPhonesReboot(body);
            
        }
        
        /// <summary>
        /// Test PostProvidersEdgesSiteRebalance
        /// </summary>
        [Test]
        public void PostProvidersEdgesSiteRebalanceTest()
        {
            // TODO: add unit test for the method 'PostProvidersEdgesSiteRebalance'
            string siteId = null; // TODO: replace null with proper value
            instance.PostProvidersEdgesSiteRebalance(siteId);
            
        }
        
        /// <summary>
        /// Test PostProvidersEdgesSites
        /// </summary>
        [Test]
        public void PostProvidersEdgesSitesTest()
        {
            // TODO: add unit test for the method 'PostProvidersEdgesSites'
            Site body = null; // TODO: replace null with proper value
            var response = instance.PostProvidersEdgesSites(body);
            Assert.IsInstanceOf<Site> (response, "response is Site");
        }
        
        /// <summary>
        /// Test PostProvidersEdgesTrunkbasesettings
        /// </summary>
        [Test]
        public void PostProvidersEdgesTrunkbasesettingsTest()
        {
            // TODO: add unit test for the method 'PostProvidersEdgesTrunkbasesettings'
            TrunkBase body = null; // TODO: replace null with proper value
            var response = instance.PostProvidersEdgesTrunkbasesettings(body);
            Assert.IsInstanceOf<TrunkBase> (response, "response is TrunkBase");
        }
        
        /// <summary>
        /// Test PutProvidersEdge
        /// </summary>
        [Test]
        public void PutProvidersEdgeTest()
        {
            // TODO: add unit test for the method 'PutProvidersEdge'
            string edgeId = null; // TODO: replace null with proper value
            Edge body = null; // TODO: replace null with proper value
            var response = instance.PutProvidersEdge(edgeId, body);
            Assert.IsInstanceOf<Edge> (response, "response is Edge");
        }
        
        /// <summary>
        /// Test PutProvidersEdgeLine
        /// </summary>
        [Test]
        public void PutProvidersEdgeLineTest()
        {
            // TODO: add unit test for the method 'PutProvidersEdgeLine'
            string edgeId = null; // TODO: replace null with proper value
            string lineId = null; // TODO: replace null with proper value
            EdgeLine body = null; // TODO: replace null with proper value
            var response = instance.PutProvidersEdgeLine(edgeId, lineId, body);
            Assert.IsInstanceOf<EdgeLine> (response, "response is EdgeLine");
        }
        
        /// <summary>
        /// Test PutProvidersEdgeLogicalinterface
        /// </summary>
        [Test]
        public void PutProvidersEdgeLogicalinterfaceTest()
        {
            // TODO: add unit test for the method 'PutProvidersEdgeLogicalinterface'
            string edgeId = null; // TODO: replace null with proper value
            string interfaceId = null; // TODO: replace null with proper value
            DomainLogicalInterface body = null; // TODO: replace null with proper value
            var response = instance.PutProvidersEdgeLogicalinterface(edgeId, interfaceId, body);
            Assert.IsInstanceOf<DomainLogicalInterface> (response, "response is DomainLogicalInterface");
        }
        
        /// <summary>
        /// Test PutProvidersEdgesCertificateauthority
        /// </summary>
        [Test]
        public void PutProvidersEdgesCertificateauthorityTest()
        {
            // TODO: add unit test for the method 'PutProvidersEdgesCertificateauthority'
            string certificateId = null; // TODO: replace null with proper value
            DomainCertificateAuthority body = null; // TODO: replace null with proper value
            var response = instance.PutProvidersEdgesCertificateauthority(certificateId, body);
            Assert.IsInstanceOf<DomainCertificateAuthority> (response, "response is DomainCertificateAuthority");
        }
        
        /// <summary>
        /// Test PutProvidersEdgesDid
        /// </summary>
        [Test]
        public void PutProvidersEdgesDidTest()
        {
            // TODO: add unit test for the method 'PutProvidersEdgesDid'
            string didId = null; // TODO: replace null with proper value
            DID body = null; // TODO: replace null with proper value
            var response = instance.PutProvidersEdgesDid(didId, body);
            Assert.IsInstanceOf<DID> (response, "response is DID");
        }
        
        /// <summary>
        /// Test PutProvidersEdgesDidpool
        /// </summary>
        [Test]
        public void PutProvidersEdgesDidpoolTest()
        {
            // TODO: add unit test for the method 'PutProvidersEdgesDidpool'
            string didPoolId = null; // TODO: replace null with proper value
            DIDPool body = null; // TODO: replace null with proper value
            var response = instance.PutProvidersEdgesDidpool(didPoolId, body);
            Assert.IsInstanceOf<DIDPool> (response, "response is DIDPool");
        }
        
        /// <summary>
        /// Test PutProvidersEdgesEdgegroup
        /// </summary>
        [Test]
        public void PutProvidersEdgesEdgegroupTest()
        {
            // TODO: add unit test for the method 'PutProvidersEdgesEdgegroup'
            string edgeGroupId = null; // TODO: replace null with proper value
            EdgeGroup body = null; // TODO: replace null with proper value
            var response = instance.PutProvidersEdgesEdgegroup(edgeGroupId, body);
            Assert.IsInstanceOf<EdgeGroup> (response, "response is EdgeGroup");
        }
        
        /// <summary>
        /// Test PutProvidersEdgesEndpoint
        /// </summary>
        [Test]
        public void PutProvidersEdgesEndpointTest()
        {
            // TODO: add unit test for the method 'PutProvidersEdgesEndpoint'
            string endpointId = null; // TODO: replace null with proper value
            Endpoint body = null; // TODO: replace null with proper value
            var response = instance.PutProvidersEdgesEndpoint(endpointId, body);
            Assert.IsInstanceOf<Endpoint> (response, "response is Endpoint");
        }
        
        /// <summary>
        /// Test PutProvidersEdgesExtension
        /// </summary>
        [Test]
        public void PutProvidersEdgesExtensionTest()
        {
            // TODO: add unit test for the method 'PutProvidersEdgesExtension'
            string extensionId = null; // TODO: replace null with proper value
            Extension body = null; // TODO: replace null with proper value
            var response = instance.PutProvidersEdgesExtension(extensionId, body);
            Assert.IsInstanceOf<Extension> (response, "response is Extension");
        }
        
        /// <summary>
        /// Test PutProvidersEdgesExtensionpool
        /// </summary>
        [Test]
        public void PutProvidersEdgesExtensionpoolTest()
        {
            // TODO: add unit test for the method 'PutProvidersEdgesExtensionpool'
            string extensionPoolId = null; // TODO: replace null with proper value
            ExtensionPool body = null; // TODO: replace null with proper value
            var response = instance.PutProvidersEdgesExtensionpool(extensionPoolId, body);
            Assert.IsInstanceOf<ExtensionPool> (response, "response is ExtensionPool");
        }
        
        /// <summary>
        /// Test PutProvidersEdgesOutboundroute
        /// </summary>
        [Test]
        public void PutProvidersEdgesOutboundrouteTest()
        {
            // TODO: add unit test for the method 'PutProvidersEdgesOutboundroute'
            string outboundRouteId = null; // TODO: replace null with proper value
            OutboundRoute body = null; // TODO: replace null with proper value
            var response = instance.PutProvidersEdgesOutboundroute(outboundRouteId, body);
            Assert.IsInstanceOf<OutboundRoute> (response, "response is OutboundRoute");
        }
        
        /// <summary>
        /// Test PutProvidersEdgesPhone
        /// </summary>
        [Test]
        public void PutProvidersEdgesPhoneTest()
        {
            // TODO: add unit test for the method 'PutProvidersEdgesPhone'
            string phoneId = null; // TODO: replace null with proper value
            Phone body = null; // TODO: replace null with proper value
            var response = instance.PutProvidersEdgesPhone(phoneId, body);
            Assert.IsInstanceOf<Phone> (response, "response is Phone");
        }
        
        /// <summary>
        /// Test PutProvidersEdgesPhonebasesetting
        /// </summary>
        [Test]
        public void PutProvidersEdgesPhonebasesettingTest()
        {
            // TODO: add unit test for the method 'PutProvidersEdgesPhonebasesetting'
            string phoneBaseId = null; // TODO: replace null with proper value
            PhoneBase body = null; // TODO: replace null with proper value
            var response = instance.PutProvidersEdgesPhonebasesetting(phoneBaseId, body);
            Assert.IsInstanceOf<PhoneBase> (response, "response is PhoneBase");
        }
        
        /// <summary>
        /// Test PutProvidersEdgesSite
        /// </summary>
        [Test]
        public void PutProvidersEdgesSiteTest()
        {
            // TODO: add unit test for the method 'PutProvidersEdgesSite'
            string siteId = null; // TODO: replace null with proper value
            Site body = null; // TODO: replace null with proper value
            var response = instance.PutProvidersEdgesSite(siteId, body);
            Assert.IsInstanceOf<Site> (response, "response is Site");
        }
        
        /// <summary>
        /// Test PutProvidersEdgesSiteNumberplans
        /// </summary>
        [Test]
        public void PutProvidersEdgesSiteNumberplansTest()
        {
            // TODO: add unit test for the method 'PutProvidersEdgesSiteNumberplans'
            string siteId = null; // TODO: replace null with proper value
            List<NumberPlan> body = null; // TODO: replace null with proper value
            var response = instance.PutProvidersEdgesSiteNumberplans(siteId, body);
            Assert.IsInstanceOf<List<NumberPlan>> (response, "response is List<NumberPlan>");
        }
        
        /// <summary>
        /// Test PutProvidersEdgesTrunkbasesetting
        /// </summary>
        [Test]
        public void PutProvidersEdgesTrunkbasesettingTest()
        {
            // TODO: add unit test for the method 'PutProvidersEdgesTrunkbasesetting'
            string trunkBaseSettingsId = null; // TODO: replace null with proper value
            TrunkBase body = null; // TODO: replace null with proper value
            var response = instance.PutProvidersEdgesTrunkbasesetting(trunkBaseSettingsId, body);
            Assert.IsInstanceOf<TrunkBase> (response, "response is TrunkBase");
        }
        
    }

}
