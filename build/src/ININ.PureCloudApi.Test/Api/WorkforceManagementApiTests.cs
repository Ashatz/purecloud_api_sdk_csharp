using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using NUnit.Framework;

using ININ.PureCloudApi.Client;
using ININ.PureCloudApi.Api;
using ININ.PureCloudApi.Model;

namespace ININ.PureCloudApi.Test
{
    /// <summary>
    ///  Class for testing WorkforceManagementApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by Swagger Codegen.
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    [TestFixture]
    public class WorkforceManagementApiTests
    {
        private WorkforceManagementApi instance;

        /// <summary>
        /// Setup before each unit test
        /// </summary>
        [SetUp]
        public void Init()
        {
            instance = new WorkforceManagementApi();
        }

        /// <summary>
        /// Clean up after each unit test
        /// </summary>
        [TearDown]
        public void Cleanup()
        {

        }

        /// <summary>
        /// Test an instance of WorkforceManagementApi
        /// </summary>
        [Test]
        public void InstanceTest()
        {
            Assert.IsInstanceOf<WorkforceManagementApi> (instance, "instance is a WorkforceManagementApi");
        }

        
        /// <summary>
        /// Test GetAdherence
        /// </summary>
        [Test]
        public void GetAdherenceTest()
        {
            // TODO: add unit test for the method 'GetAdherence'
            List<string> userId = null; // TODO: replace null with proper value
            var response = instance.GetAdherence(userId);
            Assert.IsInstanceOf<List<UserScheduleAdherence>> (response, "response is List<UserScheduleAdherence>");
        }
        
        /// <summary>
        /// Test GetDecisionsDownloadsDownloadId
        /// </summary>
        [Test]
        public void GetDecisionsDownloadsDownloadIdTest()
        {
            // TODO: add unit test for the method 'GetDecisionsDownloadsDownloadId'
            string downloadId = null; // TODO: replace null with proper value
            string downloadfilename = null; // TODO: replace null with proper value
            var response = instance.GetDecisionsDownloadsDownloadId(downloadId, downloadfilename);
            Assert.IsInstanceOf<DecisionsDownloadLink> (response, "response is DecisionsDownloadLink");
        }
        
        /// <summary>
        /// Test GetManagementunitsMuIdActivitycodes
        /// </summary>
        [Test]
        public void GetManagementunitsMuIdActivitycodesTest()
        {
            // TODO: add unit test for the method 'GetManagementunitsMuIdActivitycodes'
            string muId = null; // TODO: replace null with proper value
            var response = instance.GetManagementunitsMuIdActivitycodes(muId);
            Assert.IsInstanceOf<ActivityCodeContainer> (response, "response is ActivityCodeContainer");
        }
        
        /// <summary>
        /// Test GetManagementunitsMuIdUsers
        /// </summary>
        [Test]
        public void GetManagementunitsMuIdUsersTest()
        {
            // TODO: add unit test for the method 'GetManagementunitsMuIdUsers'
            string muId = null; // TODO: replace null with proper value
            var response = instance.GetManagementunitsMuIdUsers(muId);
            Assert.IsInstanceOf<WfmUserEntityListing> (response, "response is WfmUserEntityListing");
        }
        
        /// <summary>
        /// Test GetManagementunitsMuIdUsersUserIdTimeoffrequests
        /// </summary>
        [Test]
        public void GetManagementunitsMuIdUsersUserIdTimeoffrequestsTest()
        {
            // TODO: add unit test for the method 'GetManagementunitsMuIdUsersUserIdTimeoffrequests'
            string muId = null; // TODO: replace null with proper value
            string userId = null; // TODO: replace null with proper value
            bool? recentlyReviewed = null; // TODO: replace null with proper value
            var response = instance.GetManagementunitsMuIdUsersUserIdTimeoffrequests(muId, userId, recentlyReviewed);
            Assert.IsInstanceOf<TimeOffRequestList> (response, "response is TimeOffRequestList");
        }
        
        /// <summary>
        /// Test GetManagementunitsMuIdUsersUserIdTimeoffrequestsTimeoffrequestId
        /// </summary>
        [Test]
        public void GetManagementunitsMuIdUsersUserIdTimeoffrequestsTimeoffrequestIdTest()
        {
            // TODO: add unit test for the method 'GetManagementunitsMuIdUsersUserIdTimeoffrequestsTimeoffrequestId'
            string muId = null; // TODO: replace null with proper value
            string userId = null; // TODO: replace null with proper value
            string timeOffRequestId = null; // TODO: replace null with proper value
            var response = instance.GetManagementunitsMuIdUsersUserIdTimeoffrequestsTimeoffrequestId(muId, userId, timeOffRequestId);
            Assert.IsInstanceOf<TimeOffRequest> (response, "response is TimeOffRequest");
        }
        
        /// <summary>
        /// Test GetTimeoffrequests
        /// </summary>
        [Test]
        public void GetTimeoffrequestsTest()
        {
            // TODO: add unit test for the method 'GetTimeoffrequests'
            bool? recentlyReviewed = null; // TODO: replace null with proper value
            var response = instance.GetTimeoffrequests(recentlyReviewed);
            Assert.IsInstanceOf<TimeOffRequestList> (response, "response is TimeOffRequestList");
        }
        
        /// <summary>
        /// Test GetTimeoffrequestsTimeoffrequestId
        /// </summary>
        [Test]
        public void GetTimeoffrequestsTimeoffrequestIdTest()
        {
            // TODO: add unit test for the method 'GetTimeoffrequestsTimeoffrequestId'
            string timeOffRequestId = null; // TODO: replace null with proper value
            var response = instance.GetTimeoffrequestsTimeoffrequestId(timeOffRequestId);
            Assert.IsInstanceOf<TimeOffRequest> (response, "response is TimeOffRequest");
        }
        
        /// <summary>
        /// Test PatchTimeoffrequestsTimeoffrequestId
        /// </summary>
        [Test]
        public void PatchTimeoffrequestsTimeoffrequestIdTest()
        {
            // TODO: add unit test for the method 'PatchTimeoffrequestsTimeoffrequestId'
            string timeOffRequestId = null; // TODO: replace null with proper value
            TimeOffRequestPatch body = null; // TODO: replace null with proper value
            instance.PatchTimeoffrequestsTimeoffrequestId(timeOffRequestId, body);
            
        }
        
        /// <summary>
        /// Test PostDecisionsDownloadsSearch
        /// </summary>
        [Test]
        public void PostDecisionsDownloadsSearchTest()
        {
            // TODO: add unit test for the method 'PostDecisionsDownloadsSearch'
            ForecastSearchRequest body = null; // TODO: replace null with proper value
            var response = instance.PostDecisionsDownloadsSearch(body);
            Assert.IsInstanceOf<DecisionsFileMetadataEntityListing> (response, "response is DecisionsFileMetadataEntityListing");
        }
        
        /// <summary>
        /// Test PostLongtermforecasts
        /// </summary>
        [Test]
        public void PostLongtermforecastsTest()
        {
            // TODO: add unit test for the method 'PostLongtermforecasts'
            ForecastCreation body = null; // TODO: replace null with proper value
            var response = instance.PostLongtermforecasts(body);
            Assert.IsInstanceOf<ForecastCreationCompletion> (response, "response is ForecastCreationCompletion");
        }
        
        /// <summary>
        /// Test PostManagementunitsMuIdSchedulesSearch
        /// </summary>
        [Test]
        public void PostManagementunitsMuIdSchedulesSearchTest()
        {
            // TODO: add unit test for the method 'PostManagementunitsMuIdSchedulesSearch'
            string muId = null; // TODO: replace null with proper value
            UserListScheduleRequestBody body = null; // TODO: replace null with proper value
            var response = instance.PostManagementunitsMuIdSchedulesSearch(muId, body);
            Assert.IsInstanceOf<UserScheduleContainer> (response, "response is UserScheduleContainer");
        }
        
        /// <summary>
        /// Test PostSchedules
        /// </summary>
        [Test]
        public void PostSchedulesTest()
        {
            // TODO: add unit test for the method 'PostSchedules'
            CurrentUserScheduleRequestBody body = null; // TODO: replace null with proper value
            var response = instance.PostSchedules(body);
            Assert.IsInstanceOf<UserScheduleContainer> (response, "response is UserScheduleContainer");
        }
        
    }

}
