using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using NUnit.Framework;

using ININ.PureCloudApi.Client;
using ININ.PureCloudApi.Api;
using ININ.PureCloudApi.Model;

namespace ININ.PureCloudApi.Test
{
    /// <summary>
    ///  Class for testing WorkforceManagementApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by Swagger Codegen.
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    [TestFixture]
    public class WorkforceManagementApiTests
    {
        private WorkforceManagementApi instance;

        /// <summary>
        /// Setup before each unit test
        /// </summary>
        [SetUp]
        public void Init()
        {
            instance = new WorkforceManagementApi();
        }

        /// <summary>
        /// Clean up after each unit test
        /// </summary>
        [TearDown]
        public void Cleanup()
        {

        }

        /// <summary>
        /// Test an instance of WorkforceManagementApi
        /// </summary>
        [Test]
        public void InstanceTest()
        {
            Assert.IsInstanceOf<WorkforceManagementApi> (instance, "instance is a WorkforceManagementApi");
        }

        
        /// <summary>
        /// Test DeleteLongtermforecastsForecastId
        /// </summary>
        [Test]
        public void DeleteLongtermforecastsForecastIdTest()
        {
            // TODO: add unit test for the method 'DeleteLongtermforecastsForecastId'
            string forecastId = null; // TODO: replace null with proper value
            instance.DeleteLongtermforecastsForecastId(forecastId);
            
        }
        
        /// <summary>
        /// Test DeleteLongtermforecastsForecastIdModificationsForecastmodificationId
        /// </summary>
        [Test]
        public void DeleteLongtermforecastsForecastIdModificationsForecastmodificationIdTest()
        {
            // TODO: add unit test for the method 'DeleteLongtermforecastsForecastIdModificationsForecastmodificationId'
            string forecastId = null; // TODO: replace null with proper value
            string forecastModificationId = null; // TODO: replace null with proper value
            instance.DeleteLongtermforecastsForecastIdModificationsForecastmodificationId(forecastId, forecastModificationId);
            
        }
        
        /// <summary>
        /// Test GetAdherence
        /// </summary>
        [Test]
        public void GetAdherenceTest()
        {
            // TODO: add unit test for the method 'GetAdherence'
            List<string> userId = null; // TODO: replace null with proper value
            var response = instance.GetAdherence(userId);
            Assert.IsInstanceOf<UserScheduleAdherence> (response, "response is UserScheduleAdherence");
        }
        
        /// <summary>
        /// Test GetLongtermforecastsForecastId
        /// </summary>
        [Test]
        public void GetLongtermforecastsForecastIdTest()
        {
            // TODO: add unit test for the method 'GetLongtermforecastsForecastId'
            string forecastId = null; // TODO: replace null with proper value
            var response = instance.GetLongtermforecastsForecastId(forecastId);
            Assert.IsInstanceOf<Forecast> (response, "response is Forecast");
        }
        
        /// <summary>
        /// Test GetLongtermforecastsForecastIdModifications
        /// </summary>
        [Test]
        public void GetLongtermforecastsForecastIdModificationsTest()
        {
            // TODO: add unit test for the method 'GetLongtermforecastsForecastIdModifications'
            string forecastId = null; // TODO: replace null with proper value
            var response = instance.GetLongtermforecastsForecastIdModifications(forecastId);
            Assert.IsInstanceOf<List<ForecastModification>> (response, "response is List<ForecastModification>");
        }
        
        /// <summary>
        /// Test PostLongtermforecasts
        /// </summary>
        [Test]
        public void PostLongtermforecastsTest()
        {
            // TODO: add unit test for the method 'PostLongtermforecasts'
            ForecastCreation body = null; // TODO: replace null with proper value
            var response = instance.PostLongtermforecasts(body);
            Assert.IsInstanceOf<ForecastCreationCompletion> (response, "response is ForecastCreationCompletion");
        }
        
        /// <summary>
        /// Test PostLongtermforecastsForecastIdModifications
        /// </summary>
        [Test]
        public void PostLongtermforecastsForecastIdModificationsTest()
        {
            // TODO: add unit test for the method 'PostLongtermforecastsForecastIdModifications'
            string forecastId = null; // TODO: replace null with proper value
            ForecastModificationCreation body = null; // TODO: replace null with proper value
            var response = instance.PostLongtermforecastsForecastIdModifications(forecastId, body);
            Assert.IsInstanceOf<ForecastModificationCreation> (response, "response is ForecastModificationCreation");
        }
        
        /// <summary>
        /// Test PostLongtermforecastsSearch
        /// </summary>
        [Test]
        public void PostLongtermforecastsSearchTest()
        {
            // TODO: add unit test for the method 'PostLongtermforecastsSearch'
            ForecastSearchRequest body = null; // TODO: replace null with proper value
            var response = instance.PostLongtermforecastsSearch(body);
            Assert.IsInstanceOf<ForecastMetadataEntityListing> (response, "response is ForecastMetadataEntityListing");
        }
        
        /// <summary>
        /// Test PutLongtermforecastsForecastIdModifications
        /// </summary>
        [Test]
        public void PutLongtermforecastsForecastIdModificationsTest()
        {
            // TODO: add unit test for the method 'PutLongtermforecastsForecastIdModifications'
            string forecastId = null; // TODO: replace null with proper value
            ForecastModification body = null; // TODO: replace null with proper value
            var response = instance.PutLongtermforecastsForecastIdModifications(forecastId, body);
            Assert.IsInstanceOf<ForecastModification> (response, "response is ForecastModification");
        }
        
    }

}
