using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using NUnit.Framework;

using ININ.PureCloudApi.Client;
using ININ.PureCloudApi.Api;
using ININ.PureCloudApi.Model;

namespace ININ.PureCloudApi.Test
{
    /// <summary>
    ///  Class for testing ScriptsApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by Swagger Codegen.
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    [TestFixture]
    public class ScriptsApiTests
    {
        private ScriptsApi instance;

        /// <summary>
        /// Setup before each unit test
        /// </summary>
        [SetUp]
        public void Init()
        {
            instance = new ScriptsApi();
        }

        /// <summary>
        /// Clean up after each unit test
        /// </summary>
        [TearDown]
        public void Cleanup()
        {

        }

        /// <summary>
        /// Test an instance of ScriptsApi
        /// </summary>
        [Test]
        public void InstanceTest()
        {
            Assert.IsInstanceOf<ScriptsApi> (instance, "instance is a ScriptsApi");
        }

        
        /// <summary>
        /// Test GetPublished
        /// </summary>
        [Test]
        public void GetPublishedTest()
        {
            // TODO: add unit test for the method 'GetPublished'
            int? pageSize = null; // TODO: replace null with proper value
            int? pageNumber = null; // TODO: replace null with proper value
            string expand = null; // TODO: replace null with proper value
            string name = null; // TODO: replace null with proper value
            string feature = null; // TODO: replace null with proper value
            string flowId = null; // TODO: replace null with proper value
            var response = instance.GetPublished(pageSize, pageNumber, expand, name, feature, flowId);
            Assert.IsInstanceOf<ScriptEntityListing> (response, "response is ScriptEntityListing");
        }
        
        /// <summary>
        /// Test GetPublishedScriptId
        /// </summary>
        [Test]
        public void GetPublishedScriptIdTest()
        {
            // TODO: add unit test for the method 'GetPublishedScriptId'
            string scriptId = null; // TODO: replace null with proper value
            var response = instance.GetPublishedScriptId(scriptId);
            Assert.IsInstanceOf<Script> (response, "response is Script");
        }
        
        /// <summary>
        /// Test GetPublishedScriptIdPages
        /// </summary>
        [Test]
        public void GetPublishedScriptIdPagesTest()
        {
            // TODO: add unit test for the method 'GetPublishedScriptIdPages'
            string scriptId = null; // TODO: replace null with proper value
            var response = instance.GetPublishedScriptIdPages(scriptId);
            Assert.IsInstanceOf<List<Page>> (response, "response is List<Page>");
        }
        
        /// <summary>
        /// Test GetPublishedScriptIdPagesPageId
        /// </summary>
        [Test]
        public void GetPublishedScriptIdPagesPageIdTest()
        {
            // TODO: add unit test for the method 'GetPublishedScriptIdPagesPageId'
            string scriptId = null; // TODO: replace null with proper value
            string pageId = null; // TODO: replace null with proper value
            var response = instance.GetPublishedScriptIdPagesPageId(scriptId, pageId);
            Assert.IsInstanceOf<Page> (response, "response is Page");
        }
        
        /// <summary>
        /// Test GetPublishedScriptIdVariables
        /// </summary>
        [Test]
        public void GetPublishedScriptIdVariablesTest()
        {
            // TODO: add unit test for the method 'GetPublishedScriptIdVariables'
            string scriptId = null; // TODO: replace null with proper value
            var response = instance.GetPublishedScriptIdVariables(scriptId);
            Assert.IsInstanceOf<Object> (response, "response is Object");
        }
        
        /// <summary>
        /// Test GetScriptId
        /// </summary>
        [Test]
        public void GetScriptIdTest()
        {
            // TODO: add unit test for the method 'GetScriptId'
            string scriptId = null; // TODO: replace null with proper value
            var response = instance.GetScriptId(scriptId);
            Assert.IsInstanceOf<Script> (response, "response is Script");
        }
        
        /// <summary>
        /// Test GetScriptIdPages
        /// </summary>
        [Test]
        public void GetScriptIdPagesTest()
        {
            // TODO: add unit test for the method 'GetScriptIdPages'
            string scriptId = null; // TODO: replace null with proper value
            var response = instance.GetScriptIdPages(scriptId);
            Assert.IsInstanceOf<List<Page>> (response, "response is List<Page>");
        }
        
        /// <summary>
        /// Test GetScriptIdPagesPageId
        /// </summary>
        [Test]
        public void GetScriptIdPagesPageIdTest()
        {
            // TODO: add unit test for the method 'GetScriptIdPagesPageId'
            string scriptId = null; // TODO: replace null with proper value
            string pageId = null; // TODO: replace null with proper value
            var response = instance.GetScriptIdPagesPageId(scriptId, pageId);
            Assert.IsInstanceOf<Page> (response, "response is Page");
        }
        
        /// <summary>
        /// Test GetScripts
        /// </summary>
        [Test]
        public void GetScriptsTest()
        {
            // TODO: add unit test for the method 'GetScripts'
            int? pageSize = null; // TODO: replace null with proper value
            int? pageNumber = null; // TODO: replace null with proper value
            string expand = null; // TODO: replace null with proper value
            string name = null; // TODO: replace null with proper value
            string feature = null; // TODO: replace null with proper value
            string flowId = null; // TODO: replace null with proper value
            string sortBy = null; // TODO: replace null with proper value
            string sortOrder = null; // TODO: replace null with proper value
            var response = instance.GetScripts(pageSize, pageNumber, expand, name, feature, flowId, sortBy, sortOrder);
            Assert.IsInstanceOf<ScriptEntityListing> (response, "response is ScriptEntityListing");
        }
        
    }

}
