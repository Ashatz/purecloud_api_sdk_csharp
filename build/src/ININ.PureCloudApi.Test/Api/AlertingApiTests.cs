using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using NUnit.Framework;

using ININ.PureCloudApi.Client;
using ININ.PureCloudApi.Api;
using ININ.PureCloudApi.Model;

namespace ININ.PureCloudApi.Test
{
    /// <summary>
    ///  Class for testing AlertingApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by Swagger Codegen.
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    [TestFixture]
    public class AlertingApiTests
    {
        private AlertingApi instance;

        /// <summary>
        /// Setup before each unit test
        /// </summary>
        [SetUp]
        public void Init()
        {
            instance = new AlertingApi();
        }

        /// <summary>
        /// Clean up after each unit test
        /// </summary>
        [TearDown]
        public void Cleanup()
        {

        }

        /// <summary>
        /// Test an instance of AlertingApi
        /// </summary>
        [Test]
        public void InstanceTest()
        {
            Assert.IsInstanceOf<AlertingApi> (instance, "instance is a AlertingApi");
        }

        
        /// <summary>
        /// Test DeleteInteractionstatsAlert
        /// </summary>
        [Test]
        public void DeleteInteractionstatsAlertTest()
        {
            // TODO: add unit test for the method 'DeleteInteractionstatsAlert'
            string alertId = null; // TODO: replace null with proper value
            instance.DeleteInteractionstatsAlert(alertId);
            
        }
        
        /// <summary>
        /// Test DeleteInteractionstatsRule
        /// </summary>
        [Test]
        public void DeleteInteractionstatsRuleTest()
        {
            // TODO: add unit test for the method 'DeleteInteractionstatsRule'
            string ruleId = null; // TODO: replace null with proper value
            instance.DeleteInteractionstatsRule(ruleId);
            
        }
        
        /// <summary>
        /// Test GetInteractionstatsAlert
        /// </summary>
        [Test]
        public void GetInteractionstatsAlertTest()
        {
            // TODO: add unit test for the method 'GetInteractionstatsAlert'
            string alertId = null; // TODO: replace null with proper value
            var response = instance.GetInteractionstatsAlert(alertId);
            Assert.IsInstanceOf<InteractionStatsAlert> (response, "response is InteractionStatsAlert");
        }
        
        /// <summary>
        /// Test GetInteractionstatsAlerts
        /// </summary>
        [Test]
        public void GetInteractionstatsAlertsTest()
        {
            // TODO: add unit test for the method 'GetInteractionstatsAlerts'
            var response = instance.GetInteractionstatsAlerts();
            Assert.IsInstanceOf<InteractionStatsAlertContainer> (response, "response is InteractionStatsAlertContainer");
        }
        
        /// <summary>
        /// Test GetInteractionstatsAlertsUnread
        /// </summary>
        [Test]
        public void GetInteractionstatsAlertsUnreadTest()
        {
            // TODO: add unit test for the method 'GetInteractionstatsAlertsUnread'
            var response = instance.GetInteractionstatsAlertsUnread();
            Assert.IsInstanceOf<UnreadMetric> (response, "response is UnreadMetric");
        }
        
        /// <summary>
        /// Test GetInteractionstatsRule
        /// </summary>
        [Test]
        public void GetInteractionstatsRuleTest()
        {
            // TODO: add unit test for the method 'GetInteractionstatsRule'
            string ruleId = null; // TODO: replace null with proper value
            var response = instance.GetInteractionstatsRule(ruleId);
            Assert.IsInstanceOf<InteractionStatsRule> (response, "response is InteractionStatsRule");
        }
        
        /// <summary>
        /// Test GetInteractionstatsRules
        /// </summary>
        [Test]
        public void GetInteractionstatsRulesTest()
        {
            // TODO: add unit test for the method 'GetInteractionstatsRules'
            var response = instance.GetInteractionstatsRules();
            Assert.IsInstanceOf<InteractionStatsRuleContainer> (response, "response is InteractionStatsRuleContainer");
        }
        
        /// <summary>
        /// Test PostInteractionstatsRules
        /// </summary>
        [Test]
        public void PostInteractionstatsRulesTest()
        {
            // TODO: add unit test for the method 'PostInteractionstatsRules'
            InteractionStatsRule body = null; // TODO: replace null with proper value
            var response = instance.PostInteractionstatsRules(body);
            Assert.IsInstanceOf<InteractionStatsRule> (response, "response is InteractionStatsRule");
        }
        
        /// <summary>
        /// Test PutInteractionstatsAlert
        /// </summary>
        [Test]
        public void PutInteractionstatsAlertTest()
        {
            // TODO: add unit test for the method 'PutInteractionstatsAlert'
            string alertId = null; // TODO: replace null with proper value
            UnreadStatus body = null; // TODO: replace null with proper value
            var response = instance.PutInteractionstatsAlert(alertId, body);
            Assert.IsInstanceOf<UnreadStatus> (response, "response is UnreadStatus");
        }
        
        /// <summary>
        /// Test PutInteractionstatsRule
        /// </summary>
        [Test]
        public void PutInteractionstatsRuleTest()
        {
            // TODO: add unit test for the method 'PutInteractionstatsRule'
            string ruleId = null; // TODO: replace null with proper value
            InteractionStatsRule body = null; // TODO: replace null with proper value
            var response = instance.PutInteractionstatsRule(ruleId, body);
            Assert.IsInstanceOf<InteractionStatsRule> (response, "response is InteractionStatsRule");
        }
        
    }

}
